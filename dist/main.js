(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))};var l=r(776);(()=>{const e=(0,l.Br)(),t=(0,l.Br)(),r=((0,l.oP)("computer"),[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}]);let s=0,c=!0,i=!1;const d=e=>{if(!c){const r=e.target,a=parseInt(r.dataset.row,10),n=parseInt(r.dataset.col,10),l=o.r.convertToAlphanumeric([a,n]);if(!t.getAttackedCoordinates().includes(l)){const e=t.receiveAttack(l);e?(r.classList.add("hit"),console.log("Player hit a ship!"),e.isSunk()&&console.log(`Player sank the ${e.length}-unit ship!`)):(r.classList.add("miss"),console.log("Player missed!")),t.allShipsSunk()&&console.log("Player wins!")}}},u=()=>{i=!i},h=[{eventType:"mouseover",handler:e=>{if(c){const t=e.target,o=parseInt(t.dataset.row,10),a=parseInt(t.dataset.col,10),{length:n}=r[s];Array.from({length:n},((e,t)=>{const r=i?o+t:o,n=i?a:a+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${r}"][data-col="${n}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:a=>{if(c){const n=a.target,d=parseInt(n.dataset.row,10),u=parseInt(n.dataset.col,10),{length:h}=r[s],p=Array.from({length:h},((e,t)=>[i?d+t:d,i?u:u+t])),m=(0,l._V)(h);if(e.placeShip(m,p))if(n.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),s+=1,s===r.length)c=!1,(()=>{const e=r.map((e=>{const{length:r}=e;let o=[],a=!1;for(;!a;){const e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());i=Math.random()<.5,o=[],i?e+r-1<10&&(o=Array.from({length:r},((t,r)=>[e+r,n]))):n+r-1<10&&(o=Array.from({length:r},((t,r)=>[e,n+r]))),o.length>0&&(a=t.placeShip((0,l._V)(r),o))}return o.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),{type:e.type,coordinates:o}}));console.log("Computer ships:",e)})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=r[s].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",h),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",d)})),document.querySelector("#rotateBtn").addEventListener("click",u)}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a,oP:()=>l});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),r=[],a=[],n=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),n=o.some((([e,r])=>null!==t[e][r])),l=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(a&&!n&&!l){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:n,getShipCoordinates:r=>{const a=[];for(let n=0;n<e;n+=1)for(let l=0;l<e;l+=1){const e=t[n][l];e&&e.ship===r&&a.push(o.r.convertToAlphanumeric([n,l]))}return a},receiveAttack:e=>{const[n,l]=o.r.convertToIndices(e),s=t[n][l];if(null!==s){const{ship:t}=s;return t.hit(),r.push(e),t}return console.log("miss"),a.push(e),r.push(e),null},getMissedAttacks:()=>a,getAttackedCoordinates:()=>r,allShipsSunk:()=>{const e=n().every((e=>e.isSunk()));return console.log("All ships sunk:",e),e}}},l=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));t.add(n),e.receiveAttack(n)}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let r=0;r<t;r+=1)for(let a=0;a<t;a+=1){const t=o.convertToAlphanumeric([r,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,