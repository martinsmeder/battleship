(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))};var s=r(776);(()=>{const e=(0,s.Br)(),t=(0,s.Br)(),r=(0,s.oP)("computer"),l=[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}];let c=0,i=!0,d=!1;const u=a=>{if(!i){const n=a.target,s=parseInt(n.dataset.row,10),l=parseInt(n.dataset.col,10),c=o.r.convertToAlphanumeric([s,l]);if(!t.getAttackedCoordinates().includes(c)){const o=t.receiveAttack(c);o?(n.classList.add("hit"),o.isSunk()&&console.log(`Player sank the ${o.length}-unit ship!`)):n.classList.add("miss"),t.allShipsSunk()&&console.log("Player wins!"),(()=>{if(!i){const t=r.attack(e),o=e.receiveAttack(t),a=parseInt(t.slice(1),10)-1,n=t.charCodeAt(0)-65,s=document.querySelector(`.gameboard.player [data-row="${a}"][data-col="${n}"]`);o?(s.classList.add("hit"),o.isSunk()&&console.log(`Computer sank the ${o.length}-unit ship!`)):s.classList.add("miss"),e.allShipsSunk()&&console.log("Computer wins!")}})()}}},h=()=>{d=!d},p=[{eventType:"mouseover",handler:e=>{if(i){const t=e.target,r=parseInt(t.dataset.row,10),o=parseInt(t.dataset.col,10),{length:a}=l[c];Array.from({length:a},((e,t)=>{const a=d?r+t:r,n=d?o:o+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${a}"][data-col="${n}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:r=>{if(i){const a=r.target,n=parseInt(a.dataset.row,10),u=parseInt(a.dataset.col,10),{length:h}=l[c],p=Array.from({length:h},((e,t)=>[d?n+t:n,d?u:u+t])),m=(0,s._V)(h);if(e.placeShip(m,p))if(a.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),c+=1,c===l.length)i=!1,(()=>{const e=l.map((e=>{const{length:r}=e;let o=[],a=!1;for(;!a;){const e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());d=Math.random()<.5,o=[],d?e+r-1<10&&(o=Array.from({length:r},((t,r)=>[e+r,n]))):n+r-1<10&&(o=Array.from({length:r},((t,r)=>[e,n+r]))),o.length>0&&(a=t.placeShip((0,s._V)(r),o))}return o.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),{type:e.type,coordinates:o}}));console.log("Computer ships:",e)})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=l[c].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",p),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",u)})),document.querySelector("#rotateBtn").addEventListener("click",h)}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a,oP:()=>s});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),r=[],a=[],n=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),n=o.some((([e,r])=>null!==t[e][r])),s=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(a&&!n&&!s){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:n,getShipCoordinates:r=>{const a=[];for(let n=0;n<e;n+=1)for(let s=0;s<e;s+=1){const e=t[n][s];e&&e.ship===r&&a.push(o.r.convertToAlphanumeric([n,s]))}return a},receiveAttack:e=>{const[o,n]=e,s=parseInt(n,10)-1,l=o.charCodeAt(0)-65,c=t[s][l];if(null!==c){const{ship:t}=c;return t.hit(),r.push(e),t}return a.push(e),r.push(e),null},getMissedAttacks:()=>a,getAttackedCoordinates:()=>r,allShipsSunk:()=>{const e=n().every((e=>e.isSunk()));return console.log("All ships sunk:",e),e}}},s=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));return t.add(n),e.receiveAttack(n),n}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let r=0;r<t;r+=1)for(let a=0;a<t;a+=1){const t=o.convertToAlphanumeric([r,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,