(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))},l=e=>{document.querySelector("#winner").textContent=`${e} won!`},s=e=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{e.className="square"}))};var c=r(776);(()=>{const e=(0,c.Br)(),t=(0,c.Br)(),r=(0,c.oP)("computer");let d=0,i=!0,u=!1,h=null;const p=a=>{if(!i){const n=a.target,s=parseInt(n.dataset.row,10),c=parseInt(n.dataset.col,10),d=o.r.convertToAlphanumeric([s,c]);t.getAttackedCoordinates().includes(d)||(t.receiveAttack(d)?n.classList.add("hit"):n.classList.add("miss"),t.allShipsSunk()&&(h="You",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show")),(()=>{if(!i){const t=r.attack(e),a=e.receiveAttack(t),n=parseInt(t.slice(1),10)-1,s=t[0].charCodeAt(0)-65,c=document.querySelector(`.gameboard.player [data-row="${n}"][data-col="${s}"]`);a?c.classList.add("hit"):c.classList.add("miss"),e.allShipsSunk()&&(h="The computer",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show"))}})())}},m=()=>{u=!u},g=[{eventType:"mouseover",handler:e=>{if(i){const t=e.target,r=parseInt(t.dataset.row,10),a=parseInt(t.dataset.col,10),{length:n}=o.U.shipTypes[d];Array.from({length:n},((e,t)=>{const o=u?r+t:r,n=u?a:a+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${o}"][data-col="${n}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:r=>{if(i){const a=r.target,n=parseInt(a.dataset.row,10),l=parseInt(a.dataset.col,10),{length:s}=o.U.shipTypes[d],h=Array.from({length:s},((e,t)=>[u?n+t:n,u?l:l+t])),p=(0,c._V)(s);if(e.placeShip(p,h))if(a.classList.add("placed"),h.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),d+=1,d===o.U.shipTypes.length)i=!1,(()=>{const e=[];for(let r=0;r<o.U.shipTypes.length;r+=1){const{type:a,length:n}=o.U.shipTypes[r];let l=[],s=!1;for(;!s;){const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());u=Math.random()<.5,l=[],u?e+n-1<10&&(l=Array.from({length:n},((t,o)=>[e+o,r]))):r+n-1<10&&(l=Array.from({length:n},((t,o)=>[e,r+o]))),l.length>0&&(s=t.placeShip((0,c._V)(n),l))}e.push({type:a,coordinates:l})}})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=o.U.shipTypes[d].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",g),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",p)})),document.querySelector("#rotateBtn").addEventListener("click",m),document.querySelector("#newGame").addEventListener("click",(()=>{d=0,i=!0,u=!1,h=null,e.reset(),t.reset(),r.clearSet(),s(".gameboard.initial"),s(".gameboard.player"),s(".gameboard.computer"),document.querySelector(".ship-type").textContent=o.U.shipTypes[0].type,o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),o.U.toggleModal(document.querySelector(".modal.initial"),"show")}))}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a,oP:()=>l});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null)));let r=[],o=[];const a=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([e,t])=>e>0&&e<9&&t>0&&t<9)),n=o.some((([e,r])=>null!==t[e][r])),l=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(a&&!n&&!l){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:a,getAllShips:()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null!==e&&e.ship&&!r.includes(e.ship)&&r.push(e.ship)}return console.log(r),r},getShipCoordinates:r=>{const o=[];for(let a=0;a<e;a+=1)for(let n=0;n<e;n+=1){const e=t[a][n];e&&e.ship===r&&o.push([a,n])}return o},receiveAttack:e=>{const[a,n]=e,l=parseInt(n,10)-1,s=a.charCodeAt(0)-65,c=t[l][s];if(null!==c){const{ship:t}=c;return t.hit(),r.push(e),t}return o.push(e),r.push(e),null},getMissedAttacks:()=>o,getAttackedCoordinates:()=>r,allShipsSunk:()=>a().every((e=>e.isSunk())),reset:()=>{t.forEach(((e,r)=>{e.forEach(((e,o)=>{t[r][o]=null}))})),r=[],o=[]}}},l=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));return t.add(n),n},getAttackedSet:()=>t,clearSet:()=>{t.clear()}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[],t=([e,t])=>String.fromCharCode(t+65)+(e+1);return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:t,getAllValidCoordinates:r=>{for(let o=0;o<r;o+=1)for(let a=0;a<r;a+=1){const r=t([o,a]);e.push(r)}return e}}})(),a={shipTypes:[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}],toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoicURBT0EsTUFtREEsRUFsRDJCQSxJQUN2QixNQUFNQyxFQUFZQyxTQUFTQyxjQUFjSCxHQUV6Q0MsRUFBVUcsWUFBYyxHQUV4QixJQUFLLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxHQUFPLEVBQ2pDLElBQUssSUFBSUMsRUFBTSxFQUFHQSxFQUFNLEdBQUlBLEdBQU8sRUFBRyxDQUNwQyxNQUFNQyxFQUFTTCxTQUFTTSxjQUFjLE9BQ3RDRCxFQUFPRSxVQUFVQyxJQUFJLFVBQ3JCSCxFQUFPSSxRQUFRTixJQUFNQSxFQUNyQkUsRUFBT0ksUUFBUUwsSUFBTUEsRUFFckJMLEVBQVVXLFlBQVlMLEVBQ3hCLENBQ0YsRUFvQ0osRUFqQytCLENBQUNQLEVBQWtCYSxLQUM1QlgsU0FBU0MsY0FBY0gsR0FFL0JjLGlCQUFpQixXQUFXQyxTQUFTUixJQUM3Q00sRUFBZUUsU0FBU0MsSUFDdEJULEVBQU9VLGlCQUFpQkQsRUFBU0UsVUFBV0YsRUFBU0csUUFBUSxHQUM3RCxHQUNGLEVBMEJOLEVBdkI0QkMsSUFDRmxCLFNBQVNDLGNBQWMsV0FDL0JDLFlBQWMsR0FBR2dCLFFBQWEsRUFxQmhELEVBbEIwQnBCLElBQ0pFLFNBQVNDLGNBQWNILEdBQ2ZjLGlCQUFpQixXQUVuQ0MsU0FBU1IsSUFDS0EsRUFDUmMsVUFBWSxRQUFRLEdBQ2hDLEUsYUNwQ2EsTUFDakIsTUFBTUMsR0FBa0IsVUFDbEJDLEdBQW9CLFVBRXBCQyxHQUFXLFFBQWMsWUFFL0IsSUFBSUMsRUFBbUIsRUFDbkJDLEdBQW9CLEVBQ3BCQyxHQUFhLEVBQ2JQLEVBQVMsS0FFYixNQWtMTVEsRUFBZ0JDLElBQ3BCLElBQUtILEVBQW1CLENBQ3RCLE1BQU1uQixFQUFTc0IsRUFBRUMsT0FDWHpCLEVBQU0wQixTQUFTeEIsRUFBT0ksUUFBUU4sSUFBSyxJQUNuQ0MsRUFBTXlCLFNBQVN4QixFQUFPSSxRQUFRTCxJQUFLLElBRW5DMEIsRUFBYSxJQUFlQyxzQkFBc0IsQ0FBQzVCLEVBQUtDLElBR3pEaUIsRUFBa0JXLHlCQUF5QkMsU0FBU0gsS0FFbENULEVBQWtCYSxjQUFjSixHQUduRHpCLEVBQU9FLFVBQVVDLElBQUksT0FFckJILEVBQU9FLFVBQVVDLElBQUksUUFHbkJhLEVBQWtCYyxpQkFDcEJqQixFQUFTLE1BQ1QsRUFBMEJBLEdBQzFCLElBQVdrQixZQUNUcEMsU0FBU0MsY0FBYyxrQkFDdkIsU0F4RGEsTUFDckIsSUFBS3VCLEVBQW1CLENBRXRCLE1BQU1NLEVBQWFSLEVBQVNlLE9BQU9qQixHQUU3QmtCLEVBQWVsQixFQUFnQmMsY0FBY0osR0FFN0MzQixFQUFNMEIsU0FBU0MsRUFBV1MsTUFBTSxHQUFJLElBQU0sRUFFMUNuQyxFQUFNMEIsRUFBVyxHQUFHVSxXQUFXLEdBQUssR0FFcENuQyxFQUFTTCxTQUFTQyxjQUN0QixnQ0FBZ0NFLGlCQUFtQkMsT0FHakRrQyxFQUNGakMsRUFBT0UsVUFBVUMsSUFBSSxPQUVyQkgsRUFBT0UsVUFBVUMsSUFBSSxRQUduQlksRUFBZ0JlLGlCQUNsQmpCLEVBQVMsZUFDVCxFQUEwQkEsR0FDMUIsSUFBV2tCLFlBQ1RwQyxTQUFTQyxjQUFjLGtCQUN2QixRQUdOLEdBK0JJd0MsR0FFSixHQUdJQyxFQUFjLEtBQ2xCakIsR0FBY0EsQ0FBVSxFQUdwQmQsRUFBaUIsQ0FDckIsQ0FBRUssVUFBVyxZQUFhQyxRQTVHR1UsSUFDN0IsR0FBSUgsRUFBbUIsQ0FFckIsTUFBTW5CLEVBQVNzQixFQUFFQyxPQUNYZSxFQUFXZCxTQUFTeEIsRUFBT0ksUUFBUU4sSUFBSyxJQUN4Q3lDLEVBQVdmLFNBQVN4QixFQUFPSSxRQUFRTCxJQUFLLEtBQ3hDLE9BQUV5QyxHQUFXLElBQVdDLFVBQVV2QixHQUdqQndCLE1BQU1DLEtBQUssQ0FBRUgsV0FBVSxDQUFDSSxFQUFHQyxLQUVoRCxNQUFNL0MsRUFBTXNCLEVBQWFrQixFQUFXTyxFQUFJUCxFQUVsQ3ZDLEVBQU1xQixFQUFhbUIsRUFBV0EsRUFBV00sRUFDL0MsTUFBTyxDQUNMQyxjQUFlbkQsU0FBU0MsY0FDdEIsaUNBQWlDRSxpQkFBbUJDLE9BRXZELElBR1lTLFNBQVEsRUFBR3NDLG9CQUVwQkEsR0FFRkEsRUFBYzVDLFVBQVVDLElBQUksVUFDOUIsR0FFSixJQWlGQSxDQUFFUSxVQUFXLGFBQWNDLFFBOUVNLEtBQ1ZqQixTQUFTWSxpQkFBaUIsdUJBQ2xDQyxTQUFTdUMsSUFDdEJBLEVBQWM3QyxVQUFVOEMsT0FBTyxVQUFVLEdBQ3pDLEdBMkVGLENBQUVyQyxVQUFXLFFBQVNDLFFBektNVSxJQUM1QixHQUFJSCxFQUFtQixDQUNyQixNQUFNbkIsRUFBU3NCLEVBQUVDLE9BQ1hlLEVBQVdkLFNBQVN4QixFQUFPSSxRQUFRTixJQUFLLElBQ3hDeUMsRUFBV2YsU0FBU3hCLEVBQU9JLFFBQVFMLElBQUssS0FDeEMsT0FBRXlDLEdBQVcsSUFBV0MsVUFBVXZCLEdBR2xDK0IsRUFBa0JQLE1BQU1DLEtBQUssQ0FBRUgsV0FBVSxDQUFDSSxFQUFHQyxJQUsxQyxDQUhLekIsRUFBYWtCLEVBQVdPLEVBQUlQLEVBRTVCbEIsRUFBYW1CLEVBQVdBLEVBQVdNLEtBSzNDSyxHQUFPLFFBQVlWLEdBR3pCLEdBRmV6QixFQUFnQm9DLFVBQVVELEVBQU1ELEdBbUI3QyxHQWZBakQsRUFBT0UsVUFBVUMsSUFBSSxVQUNyQjhDLEVBQWdCekMsU0FBUSxFQUFFVixFQUFLQyxNQUVSSixTQUFTQyxjQUM1QixjQUFjRSxpQkFBbUJDLE9BRXRCRyxVQUFVQyxJQUFJLFVBQ0xSLFNBQVNDLGNBQzdCLGlDQUFpQ0UsaUJBQW1CQyxPQUV4Q0csVUFBVUMsSUFBSSxTQUFTLElBR3ZDZSxHQUFvQixFQUVoQkEsSUFBcUIsSUFBV3VCLFVBQVVELE9BRTVDckIsR0FBb0IsRUF4RkQsTUFDekIsTUFBTWlDLEVBQWdCLEdBRXRCLElBQUssSUFBSVAsRUFBSSxFQUFHQSxFQUFJLElBQVdKLFVBQVVELE9BQVFLLEdBQUssRUFBRyxDQUV2RCxNQUFNLEtBQUVRLEVBQUksT0FBRWIsR0FBVyxJQUFXQyxVQUFVSSxHQUM5QyxJQUFJUyxFQUFjLEdBQ2RDLEdBQVMsRUFFYixNQUFRQSxHQUFRLENBRWQsTUFBTWpCLEVBQVdrQixLQUFLQyxNQUFzQixHQUFoQkQsS0FBS0UsVUFDM0JuQixFQUFXaUIsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUtFLFVBQ2pDdEMsRUFBYW9DLEtBQUtFLFNBQVcsR0FFN0JKLEVBQWMsR0FFVmxDLEVBRUVrQixFQUFXRSxFQUFTLEVBQUksS0FFMUJjLEVBQWNaLE1BQU1DLEtBQUssQ0FBRUgsV0FBVSxDQUFDSSxFQUFHZSxJQUFNLENBQzdDckIsRUFBV3FCLEVBQ1hwQixNQUtBQSxFQUFXQyxFQUFTLEVBQUksS0FFMUJjLEVBQWNaLE1BQU1DLEtBQUssQ0FBRUgsV0FBVSxDQUFDSSxFQUFHZSxJQUFNLENBQzdDckIsRUFDQUMsRUFBV29CLE1BS2JMLEVBQVlkLE9BQVMsSUFFdkJlLEVBQVN2QyxFQUFrQm1DLFdBQ3pCLFFBQVlYLEdBQ1pjLEdBR04sQ0FDQUYsRUFBY1EsS0FBSyxDQUFFUCxPQUFNQyxlQUM3QixHQTJDTU8sR0FDQUMsWUFBVyxLQUVULElBQVcvQixZQUNUcEMsU0FBU0MsY0FBYyxrQkFDdkIsT0FDRCxHQUNBLFNBQ0UsQ0FHTCxNQUFNbUUsRUFBZSxJQUFXdEIsVUFBVXZCLEdBQWtCbUMsS0FFNUQxRCxTQUFTQyxjQUFjLGNBQWNDLFlBQWNrRSxDQUNyRCxDQUVKLEtBcUtGLE1BQU8sQ0FDTEMsS0ExQlcsS0FDWCxJQUFXakMsWUFBWXBDLFNBQVNDLGNBQWMsa0JBQW1CLFFBQ2pFLEVBQXlCLHNCQUN6QixFQUF5QixxQkFDekIsRUFBeUIsdUJBQ3pCLEVBQThCLHFCQUFzQlUsR0FFNUJYLFNBQVNZLGlCQUMvQiwrQkFFY0MsU0FBU1IsSUFDdkJBLEVBQU9VLGlCQUFpQixRQUFTVyxFQUFhLElBRzlCMUIsU0FBU0MsY0FBYyxjQUMvQmMsaUJBQWlCLFFBQVMyQixHQUVaMUMsU0FBU0MsY0FBYyxZQUMvQmMsaUJBQWlCLFNBQVMsS0F4QzFDUSxFQUFtQixFQUNuQkMsR0FBb0IsRUFDcEJDLEdBQWEsRUFDYlAsRUFBUyxLQUdURSxFQUFnQmtELFFBQ2hCakQsRUFBa0JpRCxRQUdsQmhELEVBQVNpRCxXQUdULEVBQXdCLHNCQUN4QixFQUF3QixxQkFDeEIsRUFBd0IsdUJBR3hCdkUsU0FBU0MsY0FBYyxjQUFjQyxZQUNuQyxJQUFXNEMsVUFBVSxHQUFHWSxLQXVCeEIsSUFBV3RCLFlBQVlwQyxTQUFTQyxjQUFjLGtCQUFtQixRQUNqRSxJQUFXbUMsWUFBWXBDLFNBQVNDLGNBQWMsa0JBQW1CLE9BQU8sR0FDeEUsRUFNTCxFQTVSa0IsR0E4UlJvRSxNLGlFQ3ZTSixNQUFNRyxFQUFlM0IsSUFDMUIsSUFBSTRCLEVBQU8sRUFRWCxNQUFPLENBQ0w1QixTQUNBNkIsSUFSVSxLQUNWRCxHQUFRLENBQUMsRUFRVEUsT0FMYSxJQUFNRixHQUFRNUIsRUFNdkI0QixXQUtGLE9BQU9BLENBQ1QsRUFDRCxFQUdVRyxFQUFtQixLQUM5QixNQUFNQyxFQUFXLEdBQ1hDLEVBQU8vQixNQUFNQyxLQUFLLENBQUVILE9BQVFnQyxJQUFZLElBQzVDOUIsTUFBTThCLEdBQVVFLEtBQUssUUFHdkIsSUFBSUMsRUFBc0IsR0FDdEJDLEVBQWdCLEdBRXBCLE1Bd0RNQyxFQUFXLEtBQ2YsTUFBTUMsRUFBUSxHQUdkLElBQUssSUFBSWhGLEVBQU0sRUFBR0EsRUFBTTBFLEVBQVUxRSxHQUFPLEVBQ3ZDLElBQUssSUFBSUMsRUFBTSxFQUFHQSxFQUFNeUUsRUFBVXpFLEdBQU8sRUFBRyxDQUMxQyxNQUFNZ0YsRUFBT04sRUFBSzNFLEdBQUtDLEdBR1osT0FBVGdGLElBQ0FBLEVBQUs3QixNQUNKNEIsRUFBTWxELFNBQVNtRCxFQUFLN0IsT0FDcEI2QixFQUFLN0IsS0FBS29CLFVBR1hRLEVBQU1sQixLQUFLbUIsRUFBSzdCLEtBRXBCLENBR0YsT0FBTzRCLENBQUssRUFxRmQsTUFBTyxDQUNMRSxRQWxLYyxJQUFNUCxFQW1LcEJ0QixVQWpLZ0IsQ0FBQ0QsRUFBTUksS0FFdkIsTUFBTTJCLEVBQW1CM0IsRUFBWTRCLE9BQ25DLEVBQUVwRixFQUFLQyxLQUNMRCxFQUFNLEdBQUtBLEVBQU0wRSxHQUFnQnpFLEVBQU0sR0FBS0EsRUFBTXlFLElBSWhEVyxFQUFZN0IsRUFBWThCLE1BQUssRUFBRXRGLEVBQUtDLEtBQTRCLE9BQW5CMEUsRUFBSzNFLEdBQUtDLEtBR3ZEc0YsRUFBb0IvQixFQUFZOEIsTUFBSyxFQUFFdEYsRUFBS0MsS0FFcEIsQ0FDMUIsQ0FBQ0QsRUFBTSxFQUFHQyxHQUNWLENBQUNELEVBQU0sRUFBR0MsR0FDVixDQUFDRCxFQUFLQyxFQUFNLEdBQ1osQ0FBQ0QsRUFBS0MsRUFBTSxHQUNaLENBQUNELEVBQU0sRUFBR0MsRUFBTSxHQUNoQixDQUFDRCxFQUFNLEVBQUdDLEVBQU0sR0FDaEIsQ0FBQ0QsRUFBTSxFQUFHQyxFQUFNLEdBQ2hCLENBQUNELEVBQU0sRUFBR0MsRUFBTSxJQUlTcUYsTUFDekIsRUFBRUUsRUFBUUMsS0FDUkQsR0FBVSxHQUNWQSxFQUFTZCxHQUNUZSxHQUFVLEdBQ1ZBLEVBQVNmLEdBQ2tCLE9BQTNCQyxFQUFLYSxLQUFVQyxPQUtyQixHQUFJTixJQUFxQkUsSUFBY0UsRUFBbUIsQ0FFeEQsTUFBTUcsRUFBVyxDQUNmdEMsT0FDQUksZUFRRixPQUpBa0MsRUFBU2xDLFlBQVk5QyxTQUFRLEVBQUVWLEVBQUtDLE1BQ2xDMEUsRUFBSzNFLEdBQUtDLEdBQU95RixDQUFRLEtBR3BCLENBQ1QsQ0FFQSxPQUFPLENBQUssRUErR1pYLFdBQ0FZLFlBdEZrQixLQUNsQixNQUFNWCxFQUFRLEdBR2QsSUFBSyxJQUFJaEYsRUFBTSxFQUFHQSxFQUFNMEUsRUFBVTFFLEdBQU8sRUFDdkMsSUFBSyxJQUFJQyxFQUFNLEVBQUdBLEVBQU15RSxFQUFVekUsR0FBTyxFQUFHLENBQzFDLE1BQU1nRixFQUFPTixFQUFLM0UsR0FBS0MsR0FFVixPQUFUZ0YsR0FBaUJBLEVBQUs3QixPQUFTNEIsRUFBTWxELFNBQVNtRCxFQUFLN0IsT0FFckQ0QixFQUFNbEIsS0FBS21CLEVBQUs3QixLQUVwQixDQUlGLE9BREF3QyxRQUFRQyxJQUFJYixHQUNMQSxDQUFLLEVBdUVaYyxtQkFwRTBCMUMsSUFDMUIsTUFBTUksRUFBYyxHQUdwQixJQUFLLElBQUl4RCxFQUFNLEVBQUdBLEVBQU0wRSxFQUFVMUUsR0FBTyxFQUN2QyxJQUFLLElBQUlDLEVBQU0sRUFBR0EsRUFBTXlFLEVBQVV6RSxHQUFPLEVBQUcsQ0FDMUMsTUFBTWdGLEVBQU9OLEVBQUszRSxHQUFLQyxHQUVuQmdGLEdBQVFBLEVBQUs3QixPQUFTQSxHQUV4QkksRUFBWU0sS0FBSyxDQUFDOUQsRUFBS0MsR0FFM0IsQ0FHRixPQUFPdUQsQ0FBVyxFQXNEbEJ6QixjQW5EcUJKLElBQ3JCLE1BQU9vRSxFQUFjQyxHQUFhckUsRUFDNUIzQixFQUFNMEIsU0FBU3NFLEVBQVcsSUFBTSxFQUNoQy9GLEVBQU04RixFQUFhMUQsV0FBVyxHQUFLLEdBQ25DNEMsRUFBT04sRUFBSzNFLEdBQUtDLEdBRXZCLEdBQWEsT0FBVGdGLEVBQWUsQ0FFakIsTUFBTSxLQUFFN0IsR0FBUzZCLEVBR2pCLE9BRkE3QixFQUFLbUIsTUFDTE0sRUFBb0JmLEtBQUtuQyxHQUNsQnlCLENBQ1QsQ0FJQSxPQUZBMEIsRUFBY2hCLEtBQUtuQyxHQUNuQmtELEVBQW9CZixLQUFLbkMsR0FDbEIsSUFBSSxFQW9DWHNFLGlCQVh1QixJQUFNbkIsRUFZN0JqRCx1QkFWNkIsSUFBTWdELEVBV25DN0MsYUFuQ21CLElBQ0wrQyxJQUdPSyxPQUFPaEMsR0FBU0EsRUFBS29CLFdBZ0MxQ0wsTUEzQlksS0FFWlEsRUFBS2pFLFNBQVEsQ0FBQ1YsRUFBS2tHLEtBQ2pCbEcsRUFBSVUsU0FBUSxDQUFDb0MsRUFBR3FELEtBQ2R4QixFQUFLdUIsR0FBVUMsR0FBWSxJQUFJLEdBQy9CLElBSUp0QixFQUFzQixHQUN0QkMsRUFBZ0IsRUFBRSxFQWtCbkIsRUFHVXNCLEVBQWlCQyxJQUM1QixNQUFNeEIsRUFBc0IsSUFBSXlCLElBbUNoQyxNQUFPLENBQ0xELE9BQ0FuRSxPQW5DY3FFLElBQ2QsTUFBTTdCLEVBQVc2QixFQUFlckIsVUFBVXhDLE9BQ3BDOEQsRUFBbUIsSUFBZUMsdUJBQXVCL0IsR0FFL0QsSUFBSS9DLEVBQWEsR0FHakIsR0FLRUEsRUFBYTZFLEVBSE85QyxLQUFLQyxNQUFNRCxLQUFLRSxTQUFXNEMsRUFBaUI5RCxlQVFoRW1DLEVBQW9CNkIsSUFBSS9FLElBQ3hCNEUsRUFBZTFFLHlCQUF5QkMsU0FBU0gsSUFNbkQsT0FGQWtELEVBQW9CeEUsSUFBSXNCLEdBRWpCQSxDQUFVLEVBWWpCZ0YsZUFUcUIsSUFBTTlCLEVBVTNCVCxTQVJlLEtBQ2ZTLEVBQW9CK0IsT0FBTyxFQVE1QixDLHlDQzFQSSxNQUFNQyxFQUFpQixNQUM1QixNQUFNTCxFQUFtQixHQVFuQjVFLEVBQXdCLEVBQUU1QixFQUFLOEcsS0FDaEJDLE9BQU9DLGFBQWFGLEVBQVMsS0FDM0I5RyxFQUFNLEdBYzdCLE1BQU8sQ0FDTGlILGlCQXZCd0J0RixJQUN4QixNQUFNbUYsRUFBU25GLEVBQVdVLFdBQVcsR0FBSyxHQUUxQyxNQUFPLENBREtYLFNBQVNDLEVBQVdTLE1BQU0sR0FBSSxJQUFNLEVBQ25DMEUsRUFBTyxFQXFCcEJsRix3QkFDQTZFLHVCQWQ4Qi9CLElBQzlCLElBQUssSUFBSTFFLEVBQU0sRUFBR0EsRUFBTTBFLEVBQVUxRSxHQUFPLEVBQ3ZDLElBQUssSUFBSUMsRUFBTSxFQUFHQSxFQUFNeUUsRUFBVXpFLEdBQU8sRUFBRyxDQUMxQyxNQUFNaUgsRUFBeUJ0RixFQUFzQixDQUFDNUIsRUFBS0MsSUFDM0R1RyxFQUFpQjFDLEtBQUtvRCxFQUN4QixDQUdGLE9BQU9WLENBQWdCLEVBUTFCLEVBOUI2QixHQWdDakJXLEVBbUJKLENBQ0x4RSxVQW5CZ0IsQ0FDaEIsQ0FBRVksS0FBTSxVQUFXYixPQUFRLEdBQzNCLENBQUVhLEtBQU0sYUFBY2IsT0FBUSxHQUM5QixDQUFFYSxLQUFNLFlBQWFiLE9BQVEsR0FDN0IsQ0FBRWEsS0FBTSxZQUFhYixPQUFRLEdBQzdCLENBQUVhLEtBQU0sY0FBZWIsT0FBUSxJQWUvQlQsWUFaa0IsQ0FBQ21GLEVBQU9DLEtBQzFCLE1BQU1DLEVBQWVGLEVBR2ZHLEVBQTBCLFNBQVhGLEVBQW9CLE9BQVMsT0FEbENELEVBQU1JLFFBQVEsWUFHdEJDLE1BQU1DLFFBQVVILEVBQ3hCRCxFQUFhRyxNQUFNQyxRQUFVSCxDQUFZLEUsR0MvQ3pDSSxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkwsR0FBVUksRUFBUUEsRUFBT0QsUUFBU0osR0FHL0NLLEVBQU9ELE9BQ2YsQ0NyQkFKLEVBQW9CTyxFQUFJLENBQUNILEVBQVNJLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFIsRUFBb0JVLEVBQUVGLEVBQVlDLEtBQVNULEVBQW9CVSxFQUFFTixFQUFTSyxJQUM1RUUsT0FBT0MsZUFBZVIsRUFBU0ssRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRULEVBQW9CVSxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDRWxGaEIsRUFBb0IsS0FFTUEsRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvcmVuZGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZmFjdG9yaWVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBtb2R1bGUgY2FuIGJlIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgY29udGVudCBvbiB0aGUgcGFnZS5cbi8vIEl0IGNhbiBpbmNsdWRlIGZ1bmN0aW9ucyB0byB1cGRhdGUgdGhlIERPTSBlbGVtZW50cyByZXByZXNlbnRpbmcgdGhlXG4vLyBnYW1lIGJvYXJkcywgc2hpcHMsIGF0dGFja3MsIG1lc3NhZ2VzLCBhbmQgb3RoZXIgVUkgY29tcG9uZW50cy4gSXQgc2hvdWxkXG4vLyBlbmNhcHN1bGF0ZSB0aGUgRE9NIG1hbmlwdWxhdGlvbiBjb2RlIGFuZCBwcm92aWRlIGEgY2xlYW4gaW50ZXJmYWNlIGZvclxuLy8gdXBkYXRpbmcgdGhlIFVJIGJhc2VkIG9uIHRoZSBnYW1lIHN0YXRlLiBJdCBjYW4gYmUgdGhlIGJyaWRnZSBiZXR3ZWVuIHRoZVxuLy8gZ2FtZSBsb2dpYyBhbmQgdGhlIGFjdHVhbCBET00gbWFuaXB1bGF0aW9uLlxuXG5jb25zdCBSZW5kZXJlciA9ICgoKSA9PiB7XG4gIGNvbnN0IHJlbmRlckdhbWVib2FyZCA9IChjb250YWluZXJFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbGVtZW50KTtcblxuICAgIGNvbnRhaW5lci50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wgKz0gMSkge1xuICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZVwiKTtcbiAgICAgICAgc3F1YXJlLmRhdGFzZXQucm93ID0gcm93O1xuICAgICAgICBzcXVhcmUuZGF0YXNldC5jb2wgPSBjb2w7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGF0dGFjaEV2ZW50TGlzdGVuZXJzID0gKGNvbnRhaW5lckVsZW1lbnQsIGV2ZW50TGlzdGVuZXJzKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbGVtZW50KTtcblxuICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnNxdWFyZVwiKS5mb3JFYWNoKChzcXVhcmUpID0+IHtcbiAgICAgIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLmV2ZW50VHlwZSwgbGlzdGVuZXIuaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzZXRXaW5uZXJIZWFkaW5nID0gKHdpbm5lcikgPT4ge1xuICAgIGNvbnN0IHdpbm5lckhlYWRpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dpbm5lclwiKTtcbiAgICB3aW5uZXJIZWFkaW5nLnRleHRDb250ZW50ID0gYCR7d2lubmVyfSB3b24hYDtcbiAgfTtcblxuICBjb25zdCBjbGVhckdhbWVib2FyZCA9IChjb250YWluZXJFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbGVtZW50KTtcbiAgICBjb25zdCBzcXVhcmVzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3F1YXJlXCIpO1xuXG4gICAgc3F1YXJlcy5mb3JFYWNoKChzcXVhcmUpID0+IHtcbiAgICAgIGNvbnN0IHJlc2V0U3F1YXJlID0gc3F1YXJlO1xuICAgICAgcmVzZXRTcXVhcmUuY2xhc3NOYW1lID0gXCJzcXVhcmVcIjsgLy8gUmVzZXQgdGhlIGNsYXNzTmFtZSB0byByZW1vdmUgYWxsIGNsYXNzZXNcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckdhbWVib2FyZCxcbiAgICBhdHRhY2hFdmVudExpc3RlbmVycyxcbiAgICBzZXRXaW5uZXJIZWFkaW5nLFxuICAgIGNsZWFyR2FtZWJvYXJkLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyZXI7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1sb25lbHktaWYgKi9cbmltcG9ydCB7IEFwcEhlbHBlcnMsIEZhY3RvcnlIZWxwZXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCBSZW5kZXJlciBmcm9tIFwiLi9yZW5kZXJcIjtcbmltcG9ydCB7IFNoaXBGYWN0b3J5LCBHYW1lYm9hcmRGYWN0b3J5LCBQbGF5ZXJGYWN0b3J5IH0gZnJvbSBcIi4vZmFjdG9yaWVzXCI7XG5cbi8vIDEuIC0tLVxuLy8gMi4gLS0tXG4vLyAzLiBGaXggYnVnIHNvIHRoYXQgc2hpcCBwbGFjZW1lbnQgYW5kIGNsYXNzLWFkZGluZyB3b3JrcyBuZXh0IHRvIGFsbCBncmlkIGJvcmRlcnNcbi8vIDQuIFN0eWxlID0+IE1vZGFsc1xuLy8gNS4gUHVzaCB0byBnaC1wYWdlcyBhbmQgYWRkIHJlYWRtZVxuXG5jb25zdCBDb250cm9sbGVyID0gKCgpID0+IHtcbiAgY29uc3QgcGxheWVyR2FtZWJvYXJkID0gR2FtZWJvYXJkRmFjdG9yeSgpO1xuICBjb25zdCBjb21wdXRlckdhbWVib2FyZCA9IEdhbWVib2FyZEZhY3RvcnkoKTtcblxuICBjb25zdCBjb21wdXRlciA9IFBsYXllckZhY3RvcnkoXCJjb21wdXRlclwiKTtcblxuICBsZXQgY3VycmVudFNoaXBJbmRleCA9IDA7XG4gIGxldCBzaGlwUGxhY2VtZW50TW9kZSA9IHRydWU7XG4gIGxldCBpc1ZlcnRpY2FsID0gZmFsc2U7XG4gIGxldCB3aW5uZXIgPSBudWxsO1xuXG4gIGNvbnN0IHBsYWNlQ29tcHV0ZXJTaGlwcyA9ICgpID0+IHtcbiAgICBjb25zdCBjb21wdXRlclNoaXBzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFwcEhlbHBlcnMuc2hpcFR5cGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAvLyBMb29wIHRocm91Z2ggc2hpcFR5cGVzIGFycmF5XG4gICAgICBjb25zdCB7IHR5cGUsIGxlbmd0aCB9ID0gQXBwSGVscGVycy5zaGlwVHlwZXNbaV07IC8vIEdldCBzaGlwIHR5cGUgYW5kIGxlbmd0aFxuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gW107XG4gICAgICBsZXQgcGxhY2VkID0gZmFsc2U7IC8vIEZsYWcgdG8gdHJhY2sgaWYgc2hpcCBwbGFjZW1lbnQgaXMgc3VjY2Vzc2Z1bFxuXG4gICAgICB3aGlsZSAoIXBsYWNlZCkge1xuICAgICAgICAvLyBMb29wIHVudGlsIHNoaXAgaXMgcGxhY2VkXG4gICAgICAgIGNvbnN0IHN0YXJ0Um93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApOyAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBzdGFydCByb3cgKDAgdG8gOSlcbiAgICAgICAgY29uc3Qgc3RhcnRDb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7IC8vIEdlbmVyYXRlIGEgcmFuZG9tIHN0YXJ0IGNvbHVtbiAoMCB0byA5KVxuICAgICAgICBpc1ZlcnRpY2FsID0gTWF0aC5yYW5kb20oKSA8IDAuNTsgLy8gUmFuZG9tbHkgZGV0ZXJtaW5lIGlmIHNoaXAgc2hvdWxkIGJlIHBsYWNlZCB2ZXJ0aWNhbGx5XG5cbiAgICAgICAgY29vcmRpbmF0ZXMgPSBbXTsgLy8gUmVzZXQgY29vcmRpbmF0ZXMgYXJyYXlcblxuICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgIC8vIElmIHNoaXAgaXMgdmVydGljYWxcbiAgICAgICAgICBpZiAoc3RhcnRSb3cgKyBsZW5ndGggLSAxIDwgMTApIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHNoaXAgY2FuIGZpdCB2ZXJ0aWNhbGx5IHdpdGhpbiB0aGUgZ2FtZWJvYXJkIGJvdW5kYXJpZXNcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aCB9LCAoXywgaikgPT4gW1xuICAgICAgICAgICAgICBzdGFydFJvdyArIGosXG4gICAgICAgICAgICAgIHN0YXJ0Q29sLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHNoaXAgaXMgaG9yaXpvbnRhbFxuICAgICAgICAgIGlmIChzdGFydENvbCArIGxlbmd0aCAtIDEgPCAxMCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2hpcCBjYW4gZml0IGhvcml6b250YWxseSB3aXRoaW4gdGhlIGdhbWVib2FyZCBib3VuZGFyaWVzXG4gICAgICAgICAgICBjb29yZGluYXRlcyA9IEFycmF5LmZyb20oeyBsZW5ndGggfSwgKF8sIGopID0+IFtcbiAgICAgICAgICAgICAgc3RhcnRSb3csXG4gICAgICAgICAgICAgIHN0YXJ0Q29sICsgaixcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gSWYgdmFsaWQgc2hpcCBjb29yZGluYXRlcyBhcmUgZ2VuZXJhdGVkXG4gICAgICAgICAgcGxhY2VkID0gY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKFxuICAgICAgICAgICAgU2hpcEZhY3RvcnkobGVuZ3RoKSxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzXG4gICAgICAgICAgKTsgLy8gQXR0ZW1wdCB0byBwbGFjZSB0aGUgc2hpcCBvbiB0aGUgY29tcHV0ZXIgZ2FtZWJvYXJkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbXB1dGVyU2hpcHMucHVzaCh7IHR5cGUsIGNvb3JkaW5hdGVzIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzaGlwUGxhY2VtZW50SGFuZGxlciA9IChlKSA9PiB7XG4gICAgaWYgKHNoaXBQbGFjZW1lbnRNb2RlKSB7XG4gICAgICBjb25zdCBzcXVhcmUgPSBlLnRhcmdldDsgLy8gR2V0IHRoZSBjbGlja2VkIHNxdWFyZSBlbGVtZW50XG4gICAgICBjb25zdCBzdGFydFJvdyA9IHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LnJvdywgMTApOyAvLyBHZXQgdGhlIHN0YXJ0aW5nIHJvd1xuICAgICAgY29uc3Qgc3RhcnRDb2wgPSBwYXJzZUludChzcXVhcmUuZGF0YXNldC5jb2wsIDEwKTsgLy8gR2V0IHRoZSBzdGFydGluZyBjb2x1bW5cbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBBcHBIZWxwZXJzLnNoaXBUeXBlc1tjdXJyZW50U2hpcEluZGV4XTsgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIHNoaXBcblxuICAgICAgLy8gR2VuZXJhdGUgYW4gYXJyYXkgb2Ygc2hpcCBjb29yZGluYXRlcyBiYXNlZCBvbiB0aGUgc2hpcCBsZW5ndGhcbiAgICAgIGNvbnN0IHNoaXBDb29yZGluYXRlcyA9IEFycmF5LmZyb20oeyBsZW5ndGggfSwgKF8sIGkpID0+IHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSByb3cgY29vcmRpbmF0ZSBiYXNlZCBvbiB2ZXJ0aWNhbCBvciBob3Jpem9udGFsIHBsYWNlbWVudFxuICAgICAgICBjb25zdCByb3cgPSBpc1ZlcnRpY2FsID8gc3RhcnRSb3cgKyBpIDogc3RhcnRSb3c7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY29sdW1uIGNvb3JkaW5hdGUgYmFzZWQgb24gdmVydGljYWwgb3IgaG9yaXpvbnRhbCBwbGFjZW1lbnRcbiAgICAgICAgY29uc3QgY29sID0gaXNWZXJ0aWNhbCA/IHN0YXJ0Q29sIDogc3RhcnRDb2wgKyBpO1xuICAgICAgICByZXR1cm4gW3JvdywgY29sXTsgLy8gUmV0dXJuIHRoZSBjb29yZGluYXRlIHBhaXJcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBdHRlbXB0IHRvIHBsYWNlIHRoZSBzaGlwIG9uIHRoZSBwbGF5ZXIgZ2FtZWJvYXJkXG4gICAgICBjb25zdCBzaGlwID0gU2hpcEZhY3RvcnkobGVuZ3RoKTtcbiAgICAgIGNvbnN0IHBsYWNlZCA9IHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcCwgc2hpcENvb3JkaW5hdGVzKTtcblxuICAgICAgaWYgKHBsYWNlZCkge1xuICAgICAgICAvLyBJZiBzaGlwIHBsYWNlbWVudCBpcyBzdWNjZXNzZnVsXG4gICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VkXCIpO1xuICAgICAgICBzaGlwQ29vcmRpbmF0ZXMuZm9yRWFjaCgoW3JvdywgY29sXSkgPT4ge1xuICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgc2hpcCBjb29yZGluYXRlc1xuICAgICAgICAgIGNvbnN0IHBsYWNlZFNxdWFyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgW2RhdGEtcm93PVwiJHtyb3d9XCJdW2RhdGEtY29sPVwiJHtjb2x9XCJdYFxuICAgICAgICAgICk7IC8vIEdldCB0aGUgY29ycmVzcG9uZGluZyBzcXVhcmUgZWxlbWVudCBvbiB0aGUgZ2FtZWJvYXJkIFVJXG4gICAgICAgICAgcGxhY2VkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZWRcIik7XG4gICAgICAgICAgY29uc3QgaW5pdGlhbFNxdWFyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgLmdhbWVib2FyZC5pbml0aWFsIFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcbiAgICAgICAgICApOyAvLyBHZXQgdGhlIGNvcnJlc3BvbmRpbmcgc3F1YXJlIGVsZW1lbnQgb24gdGhlIGluaXRpYWwgc2hpcCBwbGFjZW1lbnQgVUlcbiAgICAgICAgICBpbml0aWFsU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZWRcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnRTaGlwSW5kZXggKz0gMTsgLy8gSW5jcmVtZW50IHRoZSBjdXJyZW50U2hpcEluZGV4IHRvIG1vdmUgdG8gdGhlIG5leHQgc2hpcFxuXG4gICAgICAgIGlmIChjdXJyZW50U2hpcEluZGV4ID09PSBBcHBIZWxwZXJzLnNoaXBUeXBlcy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBJZiBhbGwgc2hpcHMgaGF2ZSBiZWVuIHBsYWNlZFxuICAgICAgICAgIHNoaXBQbGFjZW1lbnRNb2RlID0gZmFsc2U7IC8vIERpc2FibGUgc2hpcCBwbGFjZW1lbnQgbW9kZVxuICAgICAgICAgIHBsYWNlQ29tcHV0ZXJTaGlwcygpOyAvLyBQbGFjZSB0aGUgY29tcHV0ZXIncyBzaGlwc1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gU2V0IGEgdGltZW91dCB0byBkZWxheSBoaWRpbmcgdGhlIGluaXRpYWwgc2hpcCBwbGFjZW1lbnQgbW9kYWxcbiAgICAgICAgICAgIEFwcEhlbHBlcnMudG9nZ2xlTW9kYWwoXG4gICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwuaW5pdGlhbFwiKSxcbiAgICAgICAgICAgICAgXCJoaWRlXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgc3RpbGwgc2hpcHMgdG8gYmUgcGxhY2VkXG4gICAgICAgICAgLy8gR2V0IHRoZSB0eXBlIG9mIHRoZSBuZXh0IHNoaXAgYmFzZWQgb24gdGhlIGN1cnJlbnRTaGlwSW5kZXhcbiAgICAgICAgICBjb25zdCBuZXh0U2hpcFR5cGUgPSBBcHBIZWxwZXJzLnNoaXBUeXBlc1tjdXJyZW50U2hpcEluZGV4XS50eXBlO1xuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc2hpcCB0eXBlIHRleHQgb24gdGhlIFVJXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwLXR5cGVcIikudGV4dENvbnRlbnQgPSBuZXh0U2hpcFR5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2FtZWJvYXJkSG92ZXJIYW5kbGVyID0gKGUpID0+IHtcbiAgICBpZiAoc2hpcFBsYWNlbWVudE1vZGUpIHtcbiAgICAgIC8vIENoZWNrIGlmIHNoaXAgcGxhY2VtZW50IG1vZGUgaXMgYWN0aXZlXG4gICAgICBjb25zdCBzcXVhcmUgPSBlLnRhcmdldDsgLy8gR2V0IHRoZSBob3ZlcmVkIHNxdWFyZSBlbGVtZW50XG4gICAgICBjb25zdCBzdGFydFJvdyA9IHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LnJvdywgMTApOyAvLyBHZXQgdGhlIHN0YXJ0aW5nIHJvd1xuICAgICAgY29uc3Qgc3RhcnRDb2wgPSBwYXJzZUludChzcXVhcmUuZGF0YXNldC5jb2wsIDEwKTsgLy8gR2V0IHRoZSBzdGFydGluZyBjb2x1bW5cbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBBcHBIZWxwZXJzLnNoaXBUeXBlc1tjdXJyZW50U2hpcEluZGV4XTsgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIHNoaXBcblxuICAgICAgLy8gR2VuZXJhdGUgYW4gYXJyYXkgb2YgaG92ZXJlZCBzcXVhcmVzIGJhc2VkIG9uIHRoZSBzaGlwIGxlbmd0aFxuICAgICAgY29uc3QgaG92ZXJlZFNxdWFyZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoIH0sIChfLCBpKSA9PiB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcm93IGNvb3JkaW5hdGUgYmFzZWQgb24gdmVydGljYWwgb3IgaG9yaXpvbnRhbCBwbGFjZW1lbnRcbiAgICAgICAgY29uc3Qgcm93ID0gaXNWZXJ0aWNhbCA/IHN0YXJ0Um93ICsgaSA6IHN0YXJ0Um93O1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNvbHVtbiBjb29yZGluYXRlIGJhc2VkIG9uIHZlcnRpY2FsIG9yIGhvcml6b250YWwgcGxhY2VtZW50XG4gICAgICAgIGNvbnN0IGNvbCA9IGlzVmVydGljYWwgPyBzdGFydENvbCA6IHN0YXJ0Q29sICsgaTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbml0aWFsU3F1YXJlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYC5nYW1lYm9hcmQuaW5pdGlhbCBbZGF0YS1yb3c9XCIke3Jvd31cIl1bZGF0YS1jb2w9XCIke2NvbH1cIl1gXG4gICAgICAgICAgKSwgLy8gR2V0IHRoZSBjb3JyZXNwb25kaW5nIHNxdWFyZSBlbGVtZW50IG9uIHRoZSBpbml0aWFsIHNoaXAgcGxhY2VtZW50IFVJXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgaG92ZXJlZFNxdWFyZXMuZm9yRWFjaCgoeyBpbml0aWFsU3F1YXJlIH0pID0+IHtcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBob3ZlcmVkIHNxdWFyZXNcbiAgICAgICAgaWYgKGluaXRpYWxTcXVhcmUpIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgaW5pdGlhbCBzcXVhcmUgZXhpc3RzXG4gICAgICAgICAgaW5pdGlhbFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaG92ZXJlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdhbWVib2FyZE1vdXNlTGVhdmVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IGhvdmVyZWRTcXVhcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5nYW1lYm9hcmQgLmhvdmVyZWRcIik7XG4gICAgaG92ZXJlZFNxdWFyZXMuZm9yRWFjaCgoaG92ZXJlZFNxdWFyZSkgPT4ge1xuICAgICAgaG92ZXJlZFNxdWFyZS5jbGFzc0xpc3QucmVtb3ZlKFwiaG92ZXJlZFwiKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBjb21wdXRlckF0dGFjayA9ICgpID0+IHtcbiAgICBpZiAoIXNoaXBQbGFjZW1lbnRNb2RlKSB7XG4gICAgICAvLyBQZXJmb3JtIGEgY29tcHV0ZXIgYXR0YWNrIGFuZCBnZXQgdGhlIGNvb3JkaW5hdGVcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBjb21wdXRlci5hdHRhY2socGxheWVyR2FtZWJvYXJkKTtcbiAgICAgIC8vIFJlY2VpdmUgdGhlIGF0dGFjayBvbiB0aGUgcGxheWVyJ3MgZ2FtZWJvYXJkIGFuZCBnZXQgdGhlIGF0dGFja2VkIHNoaXAgKGlmIGFueSlcbiAgICAgIGNvbnN0IGF0dGFja2VkU2hpcCA9IHBsYXllckdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGUpO1xuICAgICAgLy8gRXh0cmFjdCB0aGUgcm93IG51bWJlciBmcm9tIHRoZSBjb29yZGluYXRlIGFuZCBjb252ZXJ0IGl0IHRvIGFuIGluZGV4XG4gICAgICBjb25zdCByb3cgPSBwYXJzZUludChjb29yZGluYXRlLnNsaWNlKDEpLCAxMCkgLSAxO1xuICAgICAgLy8gRXh0cmFjdCB0aGUgY29sdW1uIGxldHRlciBmcm9tIHRoZSBjb29yZGluYXRlIGFuZCBjb252ZXJ0IGl0IHRvIGEgY29sdW1uIGluZGV4XG4gICAgICBjb25zdCBjb2wgPSBjb29yZGluYXRlWzBdLmNoYXJDb2RlQXQoMCkgLSA2NTtcblxuICAgICAgY29uc3Qgc3F1YXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYC5nYW1lYm9hcmQucGxheWVyIFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcbiAgICAgICk7IC8vIEdldCB0aGUgY29ycmVzcG9uZGluZyBzcXVhcmUgZWxlbWVudCBvbiB0aGUgcGxheWVyJ3MgZ2FtZWJvYXJkXG5cbiAgICAgIGlmIChhdHRhY2tlZFNoaXApIHtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJoaXRcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcIm1pc3NcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5ZXJHYW1lYm9hcmQuYWxsU2hpcHNTdW5rKCkpIHtcbiAgICAgICAgd2lubmVyID0gXCJUaGUgY29tcHV0ZXJcIjtcbiAgICAgICAgUmVuZGVyZXIuc2V0V2lubmVySGVhZGluZyh3aW5uZXIpO1xuICAgICAgICBBcHBIZWxwZXJzLnRvZ2dsZU1vZGFsKFxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwuZW5kZ2FtZVwiKSxcbiAgICAgICAgICBcInNob3dcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBwbGF5ZXJBdHRhY2sgPSAoZSkgPT4ge1xuICAgIGlmICghc2hpcFBsYWNlbWVudE1vZGUpIHtcbiAgICAgIGNvbnN0IHNxdWFyZSA9IGUudGFyZ2V0OyAvLyBHZXQgdGhlIGNsaWNrZWQgc3F1YXJlIGVsZW1lbnRcbiAgICAgIGNvbnN0IHJvdyA9IHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LnJvdywgMTApOyAvLyBFeHRyYWN0IHRoZSByb3cgaW5kZXhcbiAgICAgIGNvbnN0IGNvbCA9IHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LmNvbCwgMTApOyAvLyBFeHRyYWN0IHRoZSBjb2x1bW4gaW5kZXhcbiAgICAgIC8vIENvbnZlcnQgdGhlIHJvdyBhbmQgY29sdW1uIGluZGljZXMgdG8gYW4gYWxwaGFudW1lcmljIGNvb3JkaW5hdGVcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBGYWN0b3J5SGVscGVycy5jb252ZXJ0VG9BbHBoYW51bWVyaWMoW3JvdywgY29sXSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjb29yZGluYXRlIGhhcyBub3QgYmVlbiBwcmV2aW91c2x5IGF0dGFja2VkXG4gICAgICBpZiAoIWNvbXB1dGVyR2FtZWJvYXJkLmdldEF0dGFja2VkQ29vcmRpbmF0ZXMoKS5pbmNsdWRlcyhjb29yZGluYXRlKSkge1xuICAgICAgICAvLyBSZWNlaXZlIHRoZSBhdHRhY2sgb24gdGhlIGNvbXB1dGVyJ3MgZ2FtZWJvYXJkIGFuZCBnZXQgdGhlIGF0dGFja2VkIHNoaXAgKGlmIGFueSlcbiAgICAgICAgY29uc3QgYXR0YWNrZWRTaGlwID0gY29tcHV0ZXJHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZGluYXRlKTtcblxuICAgICAgICBpZiAoYXR0YWNrZWRTaGlwKSB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJoaXRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbXB1dGVyR2FtZWJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgICAgd2lubmVyID0gXCJZb3VcIjtcbiAgICAgICAgICBSZW5kZXJlci5zZXRXaW5uZXJIZWFkaW5nKHdpbm5lcik7XG4gICAgICAgICAgQXBwSGVscGVycy50b2dnbGVNb2RhbChcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwuZW5kZ2FtZVwiKSxcbiAgICAgICAgICAgIFwic2hvd1wiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXB1dGVyQXR0YWNrKCk7IC8vIFBlcmZvcm0gdGhlIGNvbXB1dGVyJ3MgYXR0YWNrXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJvdGF0ZVNoaXBzID0gKCkgPT4ge1xuICAgIGlzVmVydGljYWwgPSAhaXNWZXJ0aWNhbDtcbiAgfTtcblxuICBjb25zdCBldmVudExpc3RlbmVycyA9IFtcbiAgICB7IGV2ZW50VHlwZTogXCJtb3VzZW92ZXJcIiwgaGFuZGxlcjogZ2FtZWJvYXJkSG92ZXJIYW5kbGVyIH0sXG4gICAgeyBldmVudFR5cGU6IFwibW91c2VsZWF2ZVwiLCBoYW5kbGVyOiBnYW1lYm9hcmRNb3VzZUxlYXZlSGFuZGxlciB9LFxuICAgIHsgZXZlbnRUeXBlOiBcImNsaWNrXCIsIGhhbmRsZXI6IHNoaXBQbGFjZW1lbnRIYW5kbGVyIH0sXG4gIF07XG5cbiAgY29uc3QgcmVzZXRHYW1lID0gKCkgPT4ge1xuICAgIC8vIFJlc2V0IGdhbWUtcmVsYXRlZCB2YXJpYWJsZXNcbiAgICBjdXJyZW50U2hpcEluZGV4ID0gMDtcbiAgICBzaGlwUGxhY2VtZW50TW9kZSA9IHRydWU7XG4gICAgaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgIHdpbm5lciA9IG51bGw7XG5cbiAgICAvLyBSZXNldCBnYW1lYm9hcmQgb2JqZWN0c1xuICAgIHBsYXllckdhbWVib2FyZC5yZXNldCgpO1xuICAgIGNvbXB1dGVyR2FtZWJvYXJkLnJlc2V0KCk7XG5cbiAgICAvLyBDbGVhciBjb21wdXRlcnMgYXR0YWNrZWRDb29yZGluYXRlcyBzZXRcbiAgICBjb21wdXRlci5jbGVhclNldCgpO1xuXG4gICAgLy8gUmVtb3ZlIGhpdCBhbmQgbWlzcyBjbGFzc2VzIGZyb20gYWxsIHNxdWFyZXNcbiAgICBSZW5kZXJlci5jbGVhckdhbWVib2FyZChcIi5nYW1lYm9hcmQuaW5pdGlhbFwiKTtcbiAgICBSZW5kZXJlci5jbGVhckdhbWVib2FyZChcIi5nYW1lYm9hcmQucGxheWVyXCIpO1xuICAgIFJlbmRlcmVyLmNsZWFyR2FtZWJvYXJkKFwiLmdhbWVib2FyZC5jb21wdXRlclwiKTtcblxuICAgIC8vIFJlc2V0IHNoaXBUeXBlc1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcC10eXBlXCIpLnRleHRDb250ZW50ID1cbiAgICAgIEFwcEhlbHBlcnMuc2hpcFR5cGVzWzBdLnR5cGU7XG4gIH07XG5cbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBBcHBIZWxwZXJzLnRvZ2dsZU1vZGFsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwuZW5kZ2FtZVwiKSwgXCJoaWRlXCIpO1xuICAgIFJlbmRlcmVyLnJlbmRlckdhbWVib2FyZChcIi5nYW1lYm9hcmQuaW5pdGlhbFwiKTtcbiAgICBSZW5kZXJlci5yZW5kZXJHYW1lYm9hcmQoXCIuZ2FtZWJvYXJkLnBsYXllclwiKTtcbiAgICBSZW5kZXJlci5yZW5kZXJHYW1lYm9hcmQoXCIuZ2FtZWJvYXJkLmNvbXB1dGVyXCIpO1xuICAgIFJlbmRlcmVyLmF0dGFjaEV2ZW50TGlzdGVuZXJzKFwiLmdhbWVib2FyZC5pbml0aWFsXCIsIGV2ZW50TGlzdGVuZXJzKTtcblxuICAgIGNvbnN0IGNvbXB1dGVyU3F1YXJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBcIi5nYW1lYm9hcmQuY29tcHV0ZXIgLnNxdWFyZVwiXG4gICAgKTtcbiAgICBjb21wdXRlclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiB7XG4gICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXllckF0dGFjayk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByb3RhdGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3JvdGF0ZUJ0blwiKTtcbiAgICByb3RhdGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJvdGF0ZVNoaXBzKTtcblxuICAgIGNvbnN0IHBsYXlBZ2FpbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3R2FtZVwiKTtcbiAgICBwbGF5QWdhaW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHJlc2V0R2FtZSgpO1xuICAgICAgQXBwSGVscGVycy50b2dnbGVNb2RhbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLmVuZGdhbWVcIiksIFwiaGlkZVwiKTtcbiAgICAgIEFwcEhlbHBlcnMudG9nZ2xlTW9kYWwoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC5pbml0aWFsXCIpLCBcInNob3dcIik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpbml0LFxuICB9O1xufSkoKTtcblxuQ29udHJvbGxlci5pbml0KCk7XG4iLCJpbXBvcnQgeyBGYWN0b3J5SGVscGVycyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBTaGlwRmFjdG9yeSA9IChsZW5ndGgpID0+IHtcbiAgbGV0IGhpdHMgPSAwO1xuXG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBoaXRzICs9IDE7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gaGl0cyA+PSBsZW5ndGg7IC8vIFJldHVybiB0cnVlIGlmIGhpdHMgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIGxlbmd0aFxuXG4gIHJldHVybiB7XG4gICAgbGVuZ3RoLFxuICAgIGhpdCxcbiAgICBpc1N1bmssXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICAvLyBHZXR0ZXIgZnVuY3Rpb24gZm9yIGhpdHMuIFVzaW5nIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIHRvIGVuc3VyZSBpdCBoYXMgYWNjZXNzIHRvIHRoZVxuICAgICAgLy8gYGhpdHNgIHZhcmlhYmxlIGR5bmFtaWNhbGx5LCBzaW5jZSBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgYXJlIGhvaXN0ZWQgYW5kIGNhbiBiZSB1c2VkXG4gICAgICAvLyBiZWZvcmUgdGhleSBhcmUgZGVmaW5lZC4gVGhpcyBhbGxvd3MgYWNjZXNzaW5nIHRoZSBjdXJyZW50IHZhbHVlIG9mIGBoaXRzYCBldmVuIGJlZm9yZVxuICAgICAgLy8gY2FsbGluZyB0aGUgYGhpdGAgZnVuY3Rpb25cbiAgICAgIHJldHVybiBoaXRzO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgR2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgY29uc3QgZ3JpZFNpemUgPSAxMDtcbiAgY29uc3QgZ3JpZCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGdyaWRTaXplIH0sICgpID0+XG4gICAgQXJyYXkoZ3JpZFNpemUpLmZpbGwobnVsbClcbiAgKTtcblxuICBsZXQgYXR0YWNrZWRDb29yZGluYXRlcyA9IFtdO1xuICBsZXQgbWlzc2VkQXR0YWNrcyA9IFtdO1xuXG4gIGNvbnN0IGdldEdyaWQgPSAoKSA9PiBncmlkO1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb29yZGluYXRlcykgPT4ge1xuICAgIC8vIENoZWNrIGlmIGFsbCBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBncmlkXG4gICAgY29uc3Qgd2l0aGluQm91bmRhcmllcyA9IGNvb3JkaW5hdGVzLmV2ZXJ5KFxuICAgICAgKFtyb3csIGNvbF0pID0+XG4gICAgICAgIHJvdyA+IDAgJiYgcm93IDwgZ3JpZFNpemUgLSAxICYmIGNvbCA+IDAgJiYgY29sIDwgZ3JpZFNpemUgLSAxXG4gICAgKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgY29uZmxpY3RzIHdpdGggZXhpc3Rpbmcgc2hpcCBwbGFjZW1lbnRzIG9uIHRoZSBncmlkXG4gICAgY29uc3QgY29uZmxpY3RzID0gY29vcmRpbmF0ZXMuc29tZSgoW3JvdywgY29sXSkgPT4gZ3JpZFtyb3ddW2NvbF0gIT09IG51bGwpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSBhZGphY2VudCBjb25mbGljdHMgd2l0aCBleGlzdGluZyBzaGlwIHBsYWNlbWVudHMgb24gdGhlIGdyaWRcbiAgICBjb25zdCBhZGphY2VudENvbmZsaWN0cyA9IGNvb3JkaW5hdGVzLnNvbWUoKFtyb3csIGNvbF0pID0+IHtcbiAgICAgIC8vIERlZmluZSB0aGUgYWRqYWNlbnQgY29vcmRpbmF0ZXMgYXJvdW5kIHRoZSBjdXJyZW50IGNvb3JkaW5hdGVcbiAgICAgIGNvbnN0IGFkamFjZW50Q29vcmRpbmF0ZXMgPSBbXG4gICAgICAgIFtyb3cgLSAxLCBjb2xdLCAvLyBVcFxuICAgICAgICBbcm93ICsgMSwgY29sXSwgLy8gRG93blxuICAgICAgICBbcm93LCBjb2wgLSAxXSwgLy8gTGVmdFxuICAgICAgICBbcm93LCBjb2wgKyAxXSwgLy8gUmlnaHRcbiAgICAgICAgW3JvdyAtIDEsIGNvbCAtIDFdLCAvLyBEaWFnb25hbCBVcC1MZWZ0XG4gICAgICAgIFtyb3cgLSAxLCBjb2wgKyAxXSwgLy8gRGlhZ29uYWwgVXAtUmlnaHRcbiAgICAgICAgW3JvdyArIDEsIGNvbCAtIDFdLCAvLyBEaWFnb25hbCBEb3duLUxlZnRcbiAgICAgICAgW3JvdyArIDEsIGNvbCArIDFdLCAvLyBEaWFnb25hbCBEb3duLVJpZ2h0XG4gICAgICBdO1xuXG4gICAgICAvLyBDaGVjayBpZiBhbnkgYWRqYWNlbnQgY29vcmRpbmF0ZSBoYXMgYSBzaGlwIHBsYWNlZCBvbiBpdFxuICAgICAgcmV0dXJuIGFkamFjZW50Q29vcmRpbmF0ZXMuc29tZShcbiAgICAgICAgKFthZGpSb3csIGFkakNvbF0pID0+XG4gICAgICAgICAgYWRqUm93ID49IDAgJiZcbiAgICAgICAgICBhZGpSb3cgPCBncmlkU2l6ZSAmJlxuICAgICAgICAgIGFkakNvbCA+PSAwICYmXG4gICAgICAgICAgYWRqQ29sIDwgZ3JpZFNpemUgJiZcbiAgICAgICAgICBncmlkW2FkalJvd10/LlthZGpDb2xdICE9PSBudWxsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgLy8gSWYgdGhlIHNoaXAgcGxhY2VtZW50IGlzIHdpdGhpbiBncmlkIGJvdW5kYXJpZXMsIGhhcyBubyBjb25mbGljdHMsIGFuZCBubyBhZGphY2VudCBjb25mbGljdHMuLi5cbiAgICBpZiAod2l0aGluQm91bmRhcmllcyAmJiAhY29uZmxpY3RzICYmICFhZGphY2VudENvbmZsaWN0cykge1xuICAgICAgLy8gQ3JlYXRlIGFuIG9iamVjdCBjb250YWluaW5nIHNoaXAgaW5mb3JtYXRpb24gYW5kIGNvb3JkaW5hdGVzXG4gICAgICBjb25zdCBzaGlwSW5mbyA9IHtcbiAgICAgICAgc2hpcCxcbiAgICAgICAgY29vcmRpbmF0ZXMsXG4gICAgICB9O1xuXG4gICAgICAvLyBQbGFjZSB0aGUgc2hpcCBvbiB0aGUgZ3JpZCBieSB1cGRhdGluZyB0aGUgY29ycmVzcG9uZGluZyBjZWxsc1xuICAgICAgc2hpcEluZm8uY29vcmRpbmF0ZXMuZm9yRWFjaCgoW3JvdywgY29sXSkgPT4ge1xuICAgICAgICBncmlkW3Jvd11bY29sXSA9IHNoaXBJbmZvO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0cnVlOyAvLyBTaGlwIHBsYWNlbWVudCBzdWNjZXNzZnVsXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBPdGhlcndpc2UsIHNoaXAgcGxhY2VtZW50IGZhaWxlZFxuICB9O1xuXG4gIGNvbnN0IGdldFNoaXBzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBzID0gW107XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBjZWxsIG9mIHRoZSBncmlkXG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgZ3JpZFNpemU7IHJvdyArPSAxKSB7XG4gICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBncmlkU2l6ZTsgY29sICs9IDEpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdyaWRbcm93XVtjb2xdO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY2VsbCBjb250YWlucyBhIHNoaXAgYW5kIGl0J3Mgbm90IGFscmVhZHkgaW5jbHVkZWQgaW4gdGhlIHNoaXBzIGFycmF5XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjZWxsICE9PSBudWxsICYmXG4gICAgICAgICAgY2VsbC5zaGlwICYmXG4gICAgICAgICAgIXNoaXBzLmluY2x1ZGVzKGNlbGwuc2hpcCkgJiZcbiAgICAgICAgICAhY2VsbC5zaGlwLmlzU3VuaygpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIEFkZCB0aGUgc2hpcCB0byB0aGUgc2hpcHMgYXJyYXlcbiAgICAgICAgICBzaGlwcy5wdXNoKGNlbGwuc2hpcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hpcHM7XG4gIH07XG5cbiAgY29uc3QgZ2V0QWxsU2hpcHMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hpcHMgPSBbXTtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGNlbGwgb2YgdGhlIGdyaWRcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBncmlkU2l6ZTsgcm93ICs9IDEpIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGdyaWRTaXplOyBjb2wgKz0gMSkge1xuICAgICAgICBjb25zdCBjZWxsID0gZ3JpZFtyb3ddW2NvbF07XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjZWxsIGNvbnRhaW5zIGEgc2hpcCBhbmQgaXQncyBub3QgYWxyZWFkeSBpbmNsdWRlZCBpbiB0aGUgc2hpcHMgYXJyYXlcbiAgICAgICAgaWYgKGNlbGwgIT09IG51bGwgJiYgY2VsbC5zaGlwICYmICFzaGlwcy5pbmNsdWRlcyhjZWxsLnNoaXApKSB7XG4gICAgICAgICAgLy8gQWRkIHRoZSBzaGlwIHRvIHRoZSBzaGlwcyBhcnJheVxuICAgICAgICAgIHNoaXBzLnB1c2goY2VsbC5zaGlwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKHNoaXBzKTtcbiAgICByZXR1cm4gc2hpcHM7XG4gIH07XG5cbiAgY29uc3QgZ2V0U2hpcENvb3JkaW5hdGVzID0gKHNoaXApID0+IHtcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IFtdO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY2VsbCBvZiB0aGUgZ3JpZFxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IGdyaWRTaXplOyByb3cgKz0gMSkge1xuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgZ3JpZFNpemU7IGNvbCArPSAxKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBncmlkW3Jvd11bY29sXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNlbGwgZXhpc3RzIGFuZCBjb250YWlucyB0aGUgc3BlY2lmaWVkIHNoaXBcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5zaGlwID09PSBzaGlwKSB7XG4gICAgICAgICAgLy8gQWRkIHRvIGNvb3JkaW5hdGVzIGFycmF5XG4gICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChbcm93LCBjb2xdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGUpID0+IHtcbiAgICBjb25zdCBbY29sdW1uTGV0dGVyLCByb3dOdW1iZXJdID0gY29vcmRpbmF0ZTtcbiAgICBjb25zdCByb3cgPSBwYXJzZUludChyb3dOdW1iZXIsIDEwKSAtIDE7XG4gICAgY29uc3QgY29sID0gY29sdW1uTGV0dGVyLmNoYXJDb2RlQXQoMCkgLSA2NTtcbiAgICBjb25zdCBjZWxsID0gZ3JpZFtyb3ddW2NvbF07XG5cbiAgICBpZiAoY2VsbCAhPT0gbnVsbCkge1xuICAgICAgLy8gU2hpcCBhdCBjb29yZGluYXRlLCBpdCdzIGEgaGl0XG4gICAgICBjb25zdCB7IHNoaXAgfSA9IGNlbGw7XG4gICAgICBzaGlwLmhpdCgpOyAvLyBJbmNyZW1lbnQgaGl0IGNvdW50IG9mIHRoZSBzaGlwXG4gICAgICBhdHRhY2tlZENvb3JkaW5hdGVzLnB1c2goY29vcmRpbmF0ZSk7XG4gICAgICByZXR1cm4gc2hpcDsgLy8gUmV0dXJuIHRoZSBzaGlwIG9iamVjdCB3aGVuIGl0IGlzIGhpdFxuICAgIH1cbiAgICAvLyBObyBzaGlwIGF0IGNvb3JkaW5hdGUsIGl0J3MgYSBtaXNzXG4gICAgbWlzc2VkQXR0YWNrcy5wdXNoKGNvb3JkaW5hdGUpO1xuICAgIGF0dGFja2VkQ29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICByZXR1cm4gbnVsbDsgLy8gUmV0dXJuIG51bGwgd2hlbiBpdCdzIGEgbWlzc1xuICB9O1xuXG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwcyA9IGdldFNoaXBzKCk7IC8vIFJldHJpZXZlIGFsbCB0aGUgc2hpcHMgb24gdGhlIGdhbWVib2FyZFxuXG4gICAgLy8gQ2hlY2sgaWYgYWxsIHNoaXBzIGFyZSBzdW5rLCByZXR1cm4gdHJ1ZSBpZiB5ZXMsIGFuZCByZXR1cm4gZmFsc2UgaWYgbm9cbiAgICBjb25zdCByZXN1bHQgPSBzaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgIC8vIENsZWFyIHRoZSBncmlkIGJ5IHNldHRpbmcgYWxsIGNlbGxzIHRvIG51bGxcbiAgICBncmlkLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKChfLCBjb2xJbmRleCkgPT4ge1xuICAgICAgICBncmlkW3Jvd0luZGV4XVtjb2xJbmRleF0gPSBudWxsO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWFzc2lnbiBlbXB0eSBhcnJheXMgdG8gY2xlYXIgdGhlIGNvbnRlbnRzIG9mIGF0dGFja2VkQ29vcmRpbmF0ZXMgYW5kIG1pc3NlZEF0dGFja3NcbiAgICBhdHRhY2tlZENvb3JkaW5hdGVzID0gW107XG4gICAgbWlzc2VkQXR0YWNrcyA9IFtdO1xuICB9O1xuXG4gIGNvbnN0IGdldE1pc3NlZEF0dGFja3MgPSAoKSA9PiBtaXNzZWRBdHRhY2tzO1xuXG4gIGNvbnN0IGdldEF0dGFja2VkQ29vcmRpbmF0ZXMgPSAoKSA9PiBhdHRhY2tlZENvb3JkaW5hdGVzO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0R3JpZCxcbiAgICBwbGFjZVNoaXAsXG4gICAgZ2V0U2hpcHMsXG4gICAgZ2V0QWxsU2hpcHMsXG4gICAgZ2V0U2hpcENvb3JkaW5hdGVzLFxuICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgZ2V0TWlzc2VkQXR0YWNrcyxcbiAgICBnZXRBdHRhY2tlZENvb3JkaW5hdGVzLFxuICAgIGFsbFNoaXBzU3VuayxcbiAgICByZXNldCxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBQbGF5ZXJGYWN0b3J5ID0gKG5hbWUpID0+IHtcbiAgY29uc3QgYXR0YWNrZWRDb29yZGluYXRlcyA9IG5ldyBTZXQoKTsgLy8gU2V0IHRvIGtlZXAgdHJhY2sgb2YgYXR0YWNrZWQgY29vcmRpbmF0ZXNcblxuICBjb25zdCBhdHRhY2sgPSAoZW5lbXlHYW1lYm9hcmQpID0+IHtcbiAgICBjb25zdCBncmlkU2l6ZSA9IGVuZW15R2FtZWJvYXJkLmdldEdyaWQoKS5sZW5ndGg7XG4gICAgY29uc3QgdmFsaWRDb29yZGluYXRlcyA9IEZhY3RvcnlIZWxwZXJzLmdldEFsbFZhbGlkQ29vcmRpbmF0ZXMoZ3JpZFNpemUpO1xuXG4gICAgbGV0IGNvb3JkaW5hdGUgPSBcIlwiO1xuXG4gICAgLy8gUGVyZm9ybSBhIGRvLXdoaWxlIGxvb3AgdW50aWwgYSB1bmlxdWUgY29vcmRpbmF0ZSBpcyBmb3VuZFxuICAgIGRvIHtcbiAgICAgIC8vIEdlbmVyYXRlIGEgcmFuZG9tIGluZGV4IGJhc2VkIG9uIHRoZSBsZW5ndGggb2YgdmFsaWRDb29yZGluYXRlcyBhcnJheVxuICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWxpZENvb3JkaW5hdGVzLmxlbmd0aCk7XG5cbiAgICAgIC8vIEdldCB0aGUgY29vcmRpbmF0ZSBhdCB0aGUgcmFuZG9tIGluZGV4XG4gICAgICBjb29yZGluYXRlID0gdmFsaWRDb29yZGluYXRlc1tyYW5kb21JbmRleF07XG4gICAgfSB3aGlsZSAoXG4gICAgICAvLyBDb250aW51ZSBsb29waW5nIHdpdGhvdXQgcGVyZm9ybWluZyBhbnkgYWN0aW9ucyBpZiB0aGUgY29vcmRpbmF0ZSBpcyBhbHJlYWR5XG4gICAgICAvLyBpbiB0aGUgcGxheWVycyBhdHRhY2tlZENvb3JkaW5hdGVzIHNldCBvciBpcyBpbmNsdWRlZCBpbiB0aGUgZW5lbXlHYW1lYm9hcmRzXG4gICAgICAvLyBhdHRhY2tlZENvb3JkaW5hdGVzIGFycmF5XG4gICAgICBhdHRhY2tlZENvb3JkaW5hdGVzLmhhcyhjb29yZGluYXRlKSB8fFxuICAgICAgZW5lbXlHYW1lYm9hcmQuZ2V0QXR0YWNrZWRDb29yZGluYXRlcygpLmluY2x1ZGVzKGNvb3JkaW5hdGUpXG4gICAgKTtcblxuICAgIC8vIEFkZCB0aGUgYXR0YWNrZWQgY29vcmRpbmF0ZSB0byB0aGUgcGxheWVycyBzZXQgb2YgYXR0YWNrZWQgY29vcmRpbmF0ZXNcbiAgICBhdHRhY2tlZENvb3JkaW5hdGVzLmFkZChjb29yZGluYXRlKTtcblxuICAgIHJldHVybiBjb29yZGluYXRlOyAvLyBSZXR1cm4gdGhlIGNvb3JkaW5hdGUgYXMgYW4gYXJyYXlcbiAgfTtcblxuICBjb25zdCBnZXRBdHRhY2tlZFNldCA9ICgpID0+IGF0dGFja2VkQ29vcmRpbmF0ZXM7XG5cbiAgY29uc3QgY2xlYXJTZXQgPSAoKSA9PiB7XG4gICAgYXR0YWNrZWRDb29yZGluYXRlcy5jbGVhcigpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBhdHRhY2ssXG4gICAgZ2V0QXR0YWNrZWRTZXQsXG4gICAgY2xlYXJTZXQsXG4gIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IEZhY3RvcnlIZWxwZXJzID0gKCgpID0+IHtcbiAgY29uc3QgdmFsaWRDb29yZGluYXRlcyA9IFtdO1xuXG4gIGNvbnN0IGNvbnZlcnRUb0luZGljZXMgPSAoY29vcmRpbmF0ZSkgPT4ge1xuICAgIGNvbnN0IGNvbHVtbiA9IGNvb3JkaW5hdGUuY2hhckNvZGVBdCgwKSAtIDY1OyAvLyBDb252ZXJ0IGNvbHVtbiBsZXR0ZXIgdG8gaW5kZXhcbiAgICBjb25zdCByb3cgPSBwYXJzZUludChjb29yZGluYXRlLnNsaWNlKDEpLCAxMCkgLSAxOyAvLyBDb252ZXJ0IHJvdyBudW1iZXIgdG8gaW5kZXggd2l0aCByYWRpeCAxMFxuICAgIHJldHVybiBbcm93LCBjb2x1bW5dO1xuICB9O1xuXG4gIGNvbnN0IGNvbnZlcnRUb0FscGhhbnVtZXJpYyA9IChbcm93LCBjb2x1bW5dKSA9PiB7XG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sdW1uICsgNjUpOyAvLyBDb252ZXJ0IGNvbHVtbiBpbmRleCB0byBsZXR0ZXJcbiAgICByZXR1cm4gY29vcmRpbmF0ZSArIChyb3cgKyAxKTsgLy8gQ29udmVydCByb3cgaW5kZXggdG8gbnVtYmVyXG4gIH07XG5cbiAgY29uc3QgZ2V0QWxsVmFsaWRDb29yZGluYXRlcyA9IChncmlkU2l6ZSkgPT4ge1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IGdyaWRTaXplOyByb3cgKz0gMSkge1xuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgZ3JpZFNpemU7IGNvbCArPSAxKSB7XG4gICAgICAgIGNvbnN0IGFscGhhbnVtZXJpY0Nvb3JkaW5hdGUgPSBjb252ZXJ0VG9BbHBoYW51bWVyaWMoW3JvdywgY29sXSk7XG4gICAgICAgIHZhbGlkQ29vcmRpbmF0ZXMucHVzaChhbHBoYW51bWVyaWNDb29yZGluYXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRDb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNvbnZlcnRUb0luZGljZXMsXG4gICAgY29udmVydFRvQWxwaGFudW1lcmljLFxuICAgIGdldEFsbFZhbGlkQ29vcmRpbmF0ZXMsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgY29uc3QgQXBwSGVscGVycyA9ICgoKSA9PiB7XG4gIGNvbnN0IHNoaXBUeXBlcyA9IFtcbiAgICB7IHR5cGU6IFwiY2FycmllclwiLCBsZW5ndGg6IDUgfSxcbiAgICB7IHR5cGU6IFwiYmF0dGxlc2hpcFwiLCBsZW5ndGg6IDQgfSxcbiAgICB7IHR5cGU6IFwiZGVzdHJveWVyXCIsIGxlbmd0aDogMyB9LFxuICAgIHsgdHlwZTogXCJzdWJtYXJpbmVcIiwgbGVuZ3RoOiAzIH0sXG4gICAgeyB0eXBlOiBcInBhdHJvbCBib2F0XCIsIGxlbmd0aDogMiB9LFxuICBdO1xuXG4gIGNvbnN0IHRvZ2dsZU1vZGFsID0gKG1vZGFsLCBjaG9pY2UpID0+IHtcbiAgICBjb25zdCB0b2dnbGVkTW9kYWwgPSBtb2RhbDtcblxuICAgIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5jbG9zZXN0KFwiLm92ZXJsYXlcIik7XG4gICAgY29uc3QgZGlzcGxheVZhbHVlID0gY2hvaWNlID09PSBcInNob3dcIiA/IFwiZmxleFwiIDogXCJub25lXCI7XG5cbiAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5VmFsdWU7XG4gICAgdG9nZ2xlZE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5VmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzaGlwVHlwZXMsXG4gICAgdG9nZ2xlTW9kYWwsXG4gIH07XG59KSgpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18oMzgwKTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzc2KTtcbiJdLCJuYW1lcyI6WyJjb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJyb3ciLCJjb2wiLCJzcXVhcmUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsImFwcGVuZENoaWxkIiwiZXZlbnRMaXN0ZW5lcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImhhbmRsZXIiLCJ3aW5uZXIiLCJjbGFzc05hbWUiLCJwbGF5ZXJHYW1lYm9hcmQiLCJjb21wdXRlckdhbWVib2FyZCIsImNvbXB1dGVyIiwiY3VycmVudFNoaXBJbmRleCIsInNoaXBQbGFjZW1lbnRNb2RlIiwiaXNWZXJ0aWNhbCIsInBsYXllckF0dGFjayIsImUiLCJ0YXJnZXQiLCJwYXJzZUludCIsImNvb3JkaW5hdGUiLCJjb252ZXJ0VG9BbHBoYW51bWVyaWMiLCJnZXRBdHRhY2tlZENvb3JkaW5hdGVzIiwiaW5jbHVkZXMiLCJyZWNlaXZlQXR0YWNrIiwiYWxsU2hpcHNTdW5rIiwidG9nZ2xlTW9kYWwiLCJhdHRhY2siLCJhdHRhY2tlZFNoaXAiLCJzbGljZSIsImNoYXJDb2RlQXQiLCJjb21wdXRlckF0dGFjayIsInJvdGF0ZVNoaXBzIiwic3RhcnRSb3ciLCJzdGFydENvbCIsImxlbmd0aCIsInNoaXBUeXBlcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwiaW5pdGlhbFNxdWFyZSIsImhvdmVyZWRTcXVhcmUiLCJyZW1vdmUiLCJzaGlwQ29vcmRpbmF0ZXMiLCJzaGlwIiwicGxhY2VTaGlwIiwiY29tcHV0ZXJTaGlwcyIsInR5cGUiLCJjb29yZGluYXRlcyIsInBsYWNlZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImoiLCJwdXNoIiwicGxhY2VDb21wdXRlclNoaXBzIiwic2V0VGltZW91dCIsIm5leHRTaGlwVHlwZSIsImluaXQiLCJyZXNldCIsImNsZWFyU2V0IiwiU2hpcEZhY3RvcnkiLCJoaXRzIiwiaGl0IiwiaXNTdW5rIiwiR2FtZWJvYXJkRmFjdG9yeSIsImdyaWRTaXplIiwiZ3JpZCIsImZpbGwiLCJhdHRhY2tlZENvb3JkaW5hdGVzIiwibWlzc2VkQXR0YWNrcyIsImdldFNoaXBzIiwic2hpcHMiLCJjZWxsIiwiZ2V0R3JpZCIsIndpdGhpbkJvdW5kYXJpZXMiLCJldmVyeSIsImNvbmZsaWN0cyIsInNvbWUiLCJhZGphY2VudENvbmZsaWN0cyIsImFkalJvdyIsImFkakNvbCIsInNoaXBJbmZvIiwiZ2V0QWxsU2hpcHMiLCJjb25zb2xlIiwibG9nIiwiZ2V0U2hpcENvb3JkaW5hdGVzIiwiY29sdW1uTGV0dGVyIiwicm93TnVtYmVyIiwiZ2V0TWlzc2VkQXR0YWNrcyIsInJvd0luZGV4IiwiY29sSW5kZXgiLCJQbGF5ZXJGYWN0b3J5IiwibmFtZSIsIlNldCIsImVuZW15R2FtZWJvYXJkIiwidmFsaWRDb29yZGluYXRlcyIsImdldEFsbFZhbGlkQ29vcmRpbmF0ZXMiLCJoYXMiLCJnZXRBdHRhY2tlZFNldCIsImNsZWFyIiwiRmFjdG9yeUhlbHBlcnMiLCJjb2x1bW4iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb252ZXJ0VG9JbmRpY2VzIiwiYWxwaGFudW1lcmljQ29vcmRpbmF0ZSIsIkFwcEhlbHBlcnMiLCJtb2RhbCIsImNob2ljZSIsInRvZ2dsZWRNb2RhbCIsImRpc3BsYXlWYWx1ZSIsImNsb3Nlc3QiLCJzdHlsZSIsImRpc3BsYXkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9