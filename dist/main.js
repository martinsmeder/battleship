(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},l=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))},n=e=>{document.querySelector("#winner").textContent=`${e} won!`},s=e=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{e.className="square"}))};var c=r(776);(()=>{const e=(0,c.Br)(),t=(0,c.Br)(),r=(0,c.oP)("computer");let d=0,i=!0,u=!1,h=null;const p=a=>{if(!i){const l=a.target,s=parseInt(l.dataset.row,10),c=parseInt(l.dataset.col,10),d=o.r.convertToAlphanumeric([s,c]);if(!t.getAttackedCoordinates().includes(d)){const a=t.receiveAttack(d);console.log(a),a?l.classList.add("hit"):l.classList.add("miss"),t.allShipsSunk()&&(h="You",n(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show")),(()=>{if(!i){const t=r.attack(e),a=e.receiveAttack(t),l=parseInt(t.slice(1),10)-1,s=t[0].charCodeAt(0)-65,c=document.querySelector(`.gameboard.player [data-row="${l}"][data-col="${s}"]`);a?c.classList.add("hit"):c.classList.add("miss"),e.allShipsSunk()&&(h="The computer",n(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show"))}})()}}},m=()=>{u=!u},g=[{eventType:"mouseover",handler:e=>{if(i){const t=e.target,r=parseInt(t.dataset.row,10),a=parseInt(t.dataset.col,10),{length:l}=o.U.shipTypes[d];Array.from({length:l},((e,t)=>{const o=u?r+t:r,l=u?a:a+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${o}"][data-col="${l}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:r=>{if(i){const a=r.target,l=parseInt(a.dataset.row,10),n=parseInt(a.dataset.col,10),{length:s}=o.U.shipTypes[d],h=Array.from({length:s},((e,t)=>[u?l+t:l,u?n:n+t])),p=(0,c._V)(s);if(e.placeShip(p,h))if(a.classList.add("placed"),h.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),d+=1,d===o.U.shipTypes.length)i=!1,(()=>{const e=[];for(let r=0;r<o.U.shipTypes.length;r+=1){const{type:a,length:l}=o.U.shipTypes[r];let n=[],s=!1;for(;!s;){const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());u=Math.random()<.5,n=[],u?e+l-1<10&&(n=Array.from({length:l},((t,o)=>[e+o,r]))):r+l-1<10&&(n=Array.from({length:l},((t,o)=>[e,r+o]))),n.length>0&&(s=t.placeShip((0,c._V)(l),n))}n.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),e.push({type:a,coordinates:n})}})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=o.U.shipTypes[d].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),l(".gameboard.initial",g),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",p)})),document.querySelector("#rotateBtn").addEventListener("click",m),document.querySelector("#newGame").addEventListener("click",(()=>{d=0,i=!0,u=!1,h=null,e.reset(),t.reset(),r.clearSet(),s(".gameboard.initial"),s(".gameboard.player"),s(".gameboard.computer"),document.querySelector(".ship-type").textContent=o.U.shipTypes[0].type,o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),o.U.toggleModal(document.querySelector(".modal.initial"),"show")}))}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>l,_V:()=>a,oP:()=>n});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},l=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null)));let r=[],a=[];const l=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([e,t])=>e>0&&e<9&&t>0&&t<9)),l=o.some((([e,r])=>null!==t[e][r])),n=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(a&&!l&&!n){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:l,getAllShips:()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null!==e&&e.ship&&!r.includes(e.ship)&&r.push(e.ship)}return console.log(r),r},getShipCoordinates:r=>{const a=[];for(let l=0;l<e;l+=1)for(let n=0;n<e;n+=1){const e=t[l][n];e&&e.ship===r&&a.push(o.r.convertToAlphanumeric([l,n]))}return a},receiveAttack:e=>{const[o,l]=e,n=parseInt(l,10)-1,s=o.charCodeAt(0)-65,c=t[n][s];if(null!==c){const{ship:t}=c;return t.hit(),r.push(e),t}return a.push(e),r.push(e),null},getMissedAttacks:()=>a,getAttackedCoordinates:()=>r,allShipsSunk:()=>l().every((e=>e.isSunk())),reset:()=>{t.forEach(((e,r)=>{e.forEach(((e,o)=>{t[r][o]=null}))})),r=[],a=[]}}},n=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let l="";do{l=a[Math.floor(Math.random()*a.length)]}while(t.has(l)||e.getAttackedCoordinates().includes(l));return t.add(l),l},getAttackedSet:()=>t,clearSet:()=>{t.clear()}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[],t=([e,t])=>String.fromCharCode(t+65)+(e+1);return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:t,getAllValidCoordinates:r=>{for(let o=0;o<r;o+=1)for(let a=0;a<r;a+=1){const r=t([o,a]);e.push(r)}return e}}})(),a={shipTypes:[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}],toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,r),l.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,