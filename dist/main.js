(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))};var l=r(776);(()=>{const e=(0,l.Br)(),t=[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}];let r=0,s=!0,c=!1;const i=()=>{c=!c},d=[{eventType:"mouseover",handler:e=>{if(s){const o=e.target,a=parseInt(o.dataset.row,10),n=parseInt(o.dataset.col,10),{length:l}=t[r];Array.from({length:l},((e,t)=>{const r=c?a+t:a,o=c?n:n+t;return{playerSquare:document.querySelector(`[data-row="${r}"][data-col="${o}"]`),initialSquare:document.querySelector(`.gameboard.initial [data-row="${r}"][data-col="${o}"]`)}})).forEach((({playerSquare:e,initialSquare:t})=>{e&&e.classList.add("hovered"),t&&t.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:a=>{if(s){const n=a.target,i=parseInt(n.dataset.row,10),d=parseInt(n.dataset.col,10),{length:u}=t[r],h=Array.from({length:u},((e,t)=>[c?i+t:i,c?d:d+t])),p=(0,l._V)(u);if(e.placeShip(p,h))if(n.classList.add("placed"),h.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),r+=1,r===t.length)s=!1,setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide"),console.log("Placed ships:"),e.getShips().forEach(((t,r)=>{console.log(`Ship ${r+1} - Length: ${t.length}`);const o=e.getShipCoordinates(t);console.log("Coordinates:",o)}))}),1e3);else{const e=t[r].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",d),document.querySelector("#rotateBtn").addEventListener("click",i)}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),r=[],a=[],n=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),n=o.some((([e,r])=>null!==t[e][r]));if(a&&!n){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:n,getShipCoordinates:r=>{const a=[];for(let n=0;n<e;n+=1)for(let l=0;l<e;l+=1){const e=t[n][l];e&&e.ship===r&&a.push(o.r.convertToAlphanumeric([n,l]))}return a},receiveAttack:e=>{const[n,l]=o.r.convertToIndices(e),s=t[n][l],c=s&&s.ship;c?c.hit():a.push(e),r.push(e)},getMissedAttacks:()=>a,getAttackedCoordinates:()=>r,allShipsSunk:()=>n().every((e=>e.isSunk()))}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let r=0;r<t;r+=1)for(let a=0;a<t;a+=1){const t=o.convertToAlphanumeric([r,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,