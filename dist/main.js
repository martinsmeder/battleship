(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const n=(e,t)=>{const r=document.querySelector(`${e}`);r.textContent="";for(let e=0;e<10;e+=1)for(let o=0;o<10;o+=1){const n=document.createElement("div");n.classList.add("square"),n.dataset.row=e,n.dataset.col=o,t.forEach((e=>{n.addEventListener(e.eventType,e.handler)})),r.appendChild(n)}};var s=r(776);(()=>{const e=(0,s.Br)(),t=[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}];let r=0,a=!0;const l=[{eventType:"mouseover",handler:e=>{if(a){const o=e.target,n=parseInt(o.dataset.row,10),s=parseInt(o.dataset.col,10),{length:a}=t[r];Array.from({length:a},((e,t)=>{const r=n,o=s+t;return document.querySelector(`[data-row="${r}"][data-col="${o}"]`)})).forEach((e=>{e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:n=>{if(a){const l=n.target,c=parseInt(l.dataset.row,10),i=parseInt(l.dataset.col,10),{length:d}=t[r],h=Array.from({length:d},((e,t)=>[c,i+t])),p=(0,s._V)(d);if(e.placeShip(p,h))if(l.classList.add("placed"),h.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),r+=1,r===t.length)a=!1,setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide"),console.log("Placed ships:"),e.getShips().forEach(((t,r)=>{console.log(`Ship ${r+1} - Length: ${t.length}`);const o=e.getShipCoordinates(t);console.log("Coordinates:",o)}))}),1e3);else{const e=t[r].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),n(".gameboard.initial",l)}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>s,_V:()=>n});var o=r(555);const n=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},s=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),r=[],n=[],s=()=>{const r=[];for(let o=0;o<e;o+=1)for(let n=0;n<e;n+=1){const e=t[o][n];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const n=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),s=o.some((([e,r])=>null!==t[e][r]));if(n&&!s){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:s,getShipCoordinates:r=>{const n=[];for(let s=0;s<e;s+=1)for(let a=0;a<e;a+=1){const e=t[s][a];e&&e.ship===r&&n.push(o.r.convertToAlphanumeric([s,a]))}return n},receiveAttack:e=>{const[s,a]=o.r.convertToIndices(e),l=t[s][a],c=l&&l.ship;c?c.hit():n.push(e),r.push(e)},getMissedAttacks:()=>n,getAttackedCoordinates:()=>r,allShipsSunk:()=>s().every((e=>e.isSunk()))}}},555:(e,t,r)=>{r.d(t,{U:()=>n,r:()=>o});const o=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let r=0;r<t;r+=1)for(let n=0;n<t;n+=1){const t=o.convertToAlphanumeric([r,n]);e.push(t)}return e}}})(),n={toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,r),s.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,