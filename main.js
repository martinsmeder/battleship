(()=>{"use strict";var e={380:(e,t,o)=>{var r=o(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let o=0;o<10;o+=1){const r=document.createElement("div");r.classList.add("square"),r.dataset.row=e,r.dataset.col=o,t.appendChild(r)}},l=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))},n=e=>{document.querySelector("#winner").textContent=`${e} won!`},s=e=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{e.className="square"}))};var c=o(776);(()=>{const e=(0,c.Br)(),t=(0,c.Br)(),o=(0,c.oP)("computer"),d=[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}];let i=0,u=!0,h=!1,p=null;const m=a=>{if(!u){const l=a.target,s=parseInt(l.dataset.row,10),c=parseInt(l.dataset.col,10),d=r.r.convertToAlphanumeric([s,c]);if(!t.getAttackedCoordinates().includes(d)){const a=t.receiveAttack(d);console.log(a),a?(l.classList.add("hit"),console.log(`Player hit Computer at: ${d}`),a.isSunk()&&console.log(`Player sank Computer's ${a}!`)):(l.classList.add("miss"),console.log(`Player missed at: ${d}`)),t.allShipsSunk()&&(p="You",n(p),r.U.toggleModal(document.querySelector(".modal.endgame"),"show"),console.log("Player wins!")),(()=>{if(!u){const t=o.attack(e),a=e.receiveAttack(t),l=parseInt(t.slice(1),10)-1,s=t[0].charCodeAt(0)-65,c=document.querySelector(`.gameboard.player [data-row="${l}"][data-col="${s}"]`);a?(c.classList.add("hit"),console.log(`Computer hit Player at: ${t}`),a.isSunk()&&console.log(`Computer sank Player's ${a}!`)):(c.classList.add("miss"),console.log(`Computer missed at: ${t}`)),e.allShipsSunk()&&(p="The computer",n(p),r.U.toggleModal(document.querySelector(".modal.endgame"),"show"),console.log("Computer wins!"))}})()}}},g=()=>{h=!h},y=[{eventType:"mouseover",handler:e=>{if(u){const t=e.target,o=parseInt(t.dataset.row,10),r=parseInt(t.dataset.col,10),{length:a}=d[i];Array.from({length:a},((e,t)=>{const a=h?o+t:o,l=h?r:r+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${a}"][data-col="${l}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:o=>{if(u){const a=o.target,l=parseInt(a.dataset.row,10),n=parseInt(a.dataset.col,10),{length:s}=d[i],p=Array.from({length:s},((e,t)=>[h?l+t:l,h?n:n+t])),m=(0,c._V)(s);if(e.placeShip(m,p))if(a.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),i+=1,i===d.length)u=!1,(()=>{const e=[];for(let o=0;o<d.length;o+=1){const{type:r,length:a}=d[o];let l=[],n=!1;for(;!n;){const e=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());h=Math.random()<.5,l=[],h?e+a-1<10&&(l=Array.from({length:a},((t,r)=>[e+r,o]))):o+a-1<10&&(l=Array.from({length:a},((t,r)=>[e,o+r]))),l.length>0&&(n=t.placeShip((0,c._V)(a),l))}l.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),e.push({type:r,coordinates:l})}})(),setTimeout((()=>{r.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=d[i].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{r.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),l(".gameboard.initial",y),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",m)})),document.querySelector("#rotateBtn").addEventListener("click",g),document.querySelector("#newGame").addEventListener("click",(()=>{i=0,u=!0,h=!1,p=null,e.reset(),t.reset(),o.clearSet(),s(".gameboard.initial"),s(".gameboard.player"),s(".gameboard.computer"),document.querySelector(".ship-type").textContent=d[0].type,r.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),r.U.toggleModal(document.querySelector(".modal.initial"),"show")}))}}})().init()},776:(e,t,o)=>{o.d(t,{Br:()=>l,_V:()=>a,oP:()=>n});var r=o(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},l=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null)));let o=[],a=[];const l=()=>{const o=[];for(let r=0;r<e;r+=1)for(let a=0;a<e;a+=1){const e=t[r][a];null===e||!e.ship||o.includes(e.ship)||e.ship.isSunk()||o.push(e.ship)}return o};return{getGrid:()=>t,placeShip:(o,r)=>{const a=r.every((([e,t])=>e>0&&e<9&&t>0&&t<9)),l=r.some((([e,o])=>null!==t[e][o])),n=r.some((([o,r])=>[[o-1,r],[o+1,r],[o,r-1],[o,r+1],[o-1,r-1],[o-1,r+1],[o+1,r-1],[o+1,r+1]].some((([o,r])=>o>=0&&o<e&&r>=0&&r<e&&null!==t[o]?.[r]))));if(a&&!l&&!n){const e={ship:o,coordinates:r};return e.coordinates.forEach((([o,r])=>{t[o][r]=e})),!0}return!1},getShips:l,getAllShips:()=>{const o=[];for(let r=0;r<e;r+=1)for(let a=0;a<e;a+=1){const e=t[r][a];null!==e&&e.ship&&!o.includes(e.ship)&&o.push(e.ship)}return console.log(o),o},getShipCoordinates:o=>{const a=[];for(let l=0;l<e;l+=1)for(let n=0;n<e;n+=1){const e=t[l][n];e&&e.ship===o&&a.push(r.r.convertToAlphanumeric([l,n]))}return a},receiveAttack:e=>{const[r,l]=e,n=parseInt(l,10)-1,s=r.charCodeAt(0)-65,c=t[n][s];if(null!==c){const{ship:t}=c;return t.hit(),o.push(e),t}return a.push(e),o.push(e),null},getMissedAttacks:()=>a,getAttackedCoordinates:()=>o,allShipsSunk:()=>{const e=l().every((e=>e.isSunk()));return console.log("All ships sunk:",e),e},reset:()=>{t.forEach(((e,o)=>{e.forEach(((e,r)=>{t[o][r]=null}))})),o=[],a=[]}}},n=e=>{const t=new Set;return{name:e,attack:e=>{const o=e.getGrid().length,a=r.r.getAllValidCoordinates(o);let l="";do{l=a[Math.floor(Math.random()*a.length)]}while(t.has(l)||e.getAttackedCoordinates().includes(l));return t.add(l),l},getAttackedSet:()=>t,clearSet:()=>{t.clear()}}}},555:(e,t,o)=>{o.d(t,{U:()=>a,r:()=>r});const r=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let o=0;o<t;o+=1)for(let a=0;a<t;a+=1){const t=r.convertToAlphanumeric([o,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const o=e,r="show"===t?"flex":"none";e.closest(".overlay").style.display=r,o.style.display=r}}}},t={};function o(r){var a=t[r];if(void 0!==a)return a.exports;var l=t[r]={exports:{}};return e[r](l,l.exports,o),l.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o(380),o(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,