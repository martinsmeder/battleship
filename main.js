(()=>{"use strict";var e={380:(e,t,o)=>{var r=o(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let o=0;o<10;o+=1){const r=document.createElement("div");r.classList.add("square"),r.dataset.row=e,r.dataset.col=o,t.appendChild(r)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))};var s=o(776);(()=>{const e=(0,s.Br)(),t=(0,s.Br)(),o=(0,s.oP)("computer"),l=[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}];let c=0,i=!0,d=!1;const u=a=>{if(!i){const n=a.target,s=parseInt(n.dataset.row,10),l=parseInt(n.dataset.col,10),c=r.r.convertToAlphanumeric([s,l]);if(!t.getAttackedCoordinates().includes(c)){const r=t.receiveAttack(c);r?(n.classList.add("hit"),console.log(`Player hit Computer at: ${c}`),r.isSunk()&&console.log(`Player sank Computer's ${r}!`)):(n.classList.add("miss"),console.log(`Player missed at: ${c}`)),t.allShipsSunk()&&console.log("Player wins!"),(()=>{if(!i){const t=o.attack(e);console.log(t)}})()}}},h=()=>{d=!d},p=[{eventType:"mouseover",handler:e=>{if(i){const t=e.target,o=parseInt(t.dataset.row,10),r=parseInt(t.dataset.col,10),{length:a}=l[c];Array.from({length:a},((e,t)=>{const a=d?o+t:o,n=d?r:r+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${a}"][data-col="${n}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:o=>{if(i){const a=o.target,n=parseInt(a.dataset.row,10),u=parseInt(a.dataset.col,10),{length:h}=l[c],p=Array.from({length:h},((e,t)=>[d?n+t:n,d?u:u+t])),g=(0,s._V)(h);if(e.placeShip(g,p))if(a.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),c+=1,c===l.length)i=!1,(()=>{const o=[];for(let e=0;e<l.length;e+=1){const{type:r,length:a}=l[e];let n=[],c=!1;for(;!c;){const e=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());d=Math.random()<.5,n=[],d?e+a-1<10&&(n=Array.from({length:a},((t,r)=>[e+r,o]))):o+a-1<10&&(n=Array.from({length:a},((t,r)=>[e,o+r]))),n.length>0&&(c=t.placeShip((0,s._V)(a),n))}n.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),o.push({type:r,coordinates:n})}e.getShips().forEach(((t,o)=>{const r=e.getShipCoordinates(t);console.log(`Player's ${l[o].type} coordinates: ${r.join(", ")}`)})),o.sort(((e,t)=>l.findIndex((t=>t.type===e.type))-l.findIndex((e=>e.type===t.type)))).forEach((e=>{const t=e.coordinates.map((([e,t])=>r.r.convertToAlphanumeric([e,t])));console.log(`Computer's ${e.type} coordinates: ${t.join(", ")}`)}))})(),setTimeout((()=>{r.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=l[c].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{r.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",p),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",u)})),document.querySelector("#rotateBtn").addEventListener("click",h)}}})().init()},776:(e,t,o)=>{o.d(t,{Br:()=>n,_V:()=>a,oP:()=>s});var r=o(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),o=[],a=[],n=()=>{const o=[];for(let r=0;r<e;r+=1)for(let a=0;a<e;a+=1){const e=t[r][a];null===e||!e.ship||o.includes(e.ship)||e.ship.isSunk()||o.push(e.ship)}return o};return{getGrid:()=>t,placeShip:(o,r)=>{const a=r.every((([e,t])=>e>0&&e<9&&t>0&&t<9)),n=r.some((([e,o])=>null!==t[e][o])),s=r.some((([o,r])=>[[o-1,r],[o+1,r],[o,r-1],[o,r+1],[o-1,r-1],[o-1,r+1],[o+1,r-1],[o+1,r+1]].some((([o,r])=>o>=0&&o<e&&r>=0&&r<e&&null!==t[o]?.[r]))));if(a&&!n&&!s){const e={ship:o,coordinates:r};return e.coordinates.forEach((([o,r])=>{t[o][r]=e})),!0}return!1},getShips:n,getShipCoordinates:o=>{const a=[];for(let n=0;n<e;n+=1)for(let s=0;s<e;s+=1){const e=t[n][s];e&&e.ship===o&&a.push(r.r.convertToAlphanumeric([n,s]))}return a},receiveAttack:e=>{const[r,n]=e,s=parseInt(n,10)-1,l=r.charCodeAt(0)-65,c=t[s][l];if(null!==c){const{ship:t}=c;return t.hit(),o.push(e),t}return a.push(e),o.push(e),null},getMissedAttacks:()=>a,getAttackedCoordinates:()=>o,allShipsSunk:()=>{const e=n().every((e=>e.isSunk()));return console.log("All ships sunk:",e),e}}},s=e=>{const t=new Set;return{name:e,attack:e=>{const o=e.getGrid().length,a=r.r.getAllValidCoordinates(o);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));return t.add(n),e.receiveAttack(n),n}}}},555:(e,t,o)=>{o.d(t,{U:()=>a,r:()=>r});const r=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let o=0;o<t;o+=1)for(let a=0;a<t;a+=1){const t=r.convertToAlphanumeric([o,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const o=e,r="show"===t?"flex":"none";e.closest(".overlay").style.display=r,o.style.display=r}}}},t={};function o(r){var a=t[r];if(void 0!==a)return a.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,o),n.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o(380),o(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,