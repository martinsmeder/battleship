(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const n=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const n=o.r.convertToAlphanumeric([e,r]),a=document.createElement("div");a.classList.add("square"),a.dataset.coordinate=n,t.appendChild(a)}},a=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))},l=e=>{document.querySelector("#winner").textContent=`${e} won!`},c=e=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{e.className="square"}))};var s=r(776);(()=>{const e=(0,s.Br)(),t=(0,s.Br)(),r=(0,s.oP)("computer");let i=0,d=!0,u=!1,h=null;const p=n=>{if(!d){const a=n.target,c=a.dataset.coordinate;t.getAttackedCoordinates().includes(c)||(t.receiveAttack(c)?a.classList.add("hit"):a.classList.add("miss"),t.allShipsSunk()&&(h="You",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show")),(()=>{if(!d){const t=r.attack(e,r.lastHitCoordinate,r.currentDirection),n=e.receiveAttack(t),a=document.querySelector(`.gameboard.player [data-coordinate="${t}"]`);n?(a.classList.add("hit"),r.lastHitCoordinate=t,null===r.currentDirection&&(r.currentDirection="up")):!n&&r.lastHitCoordinate?a.classList.add("miss"):n||r.lastHitCoordinate||(a.classList.add("miss"),r.lastHitCoordinate=null,r.currentDirection=null),e.allShipsSunk()&&(h="The computer",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show"))}})())}},m=()=>{u=!u},g=[{eventType:"mouseover",handler:e=>{if(d){const t=e.target.dataset.coordinate,{length:r}=o.U.shipTypes[i],[n,a]=o.r.convertToIndices(t);Array.from({length:r},((e,t)=>{const r=u?n+t:n,l=u?a:a+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-coordinate="${o.r.convertToAlphanumeric([r,l])}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:r=>{if(d){const n=r.target,{coordinate:a}=n.dataset,{length:l}=o.U.shipTypes[i],[c,h]=o.r.convertToIndices(a),p=Array.from({length:l},((e,t)=>[u?c+t:c,u?h:h+t])),m=(0,s._V)(l);if(e.placeShip(m,p))if(n.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-coordinate="${o.r.convertToAlphanumeric([e,t])}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-coordinate="${o.r.convertToAlphanumeric([e,t])}"]`).classList.add("placed")})),i+=1,i===o.U.shipTypes.length)d=!1,(()=>{for(const e of o.U.shipTypes){const{length:r}=e,n=(0,s._V)(r),a=10;let l,c=!1;for(;!c;){const e=Math.floor(Math.random()*a),o=Math.floor(Math.random()*a);u=Math.random()<.5,u&&e+r<=a?l=Array.from({length:r},((t,r)=>[e+r,o])):!u&&o+r<=a&&(l=Array.from({length:r},((t,r)=>[e,o+r]))),l&&(c=t.placeShip(n,l))}const i=t.getShipCoordinates(n);for(const[e,t]of i){const r=o.r.convertToAlphanumeric([e,t]);document.querySelector(`.gameboard.computer [data-coordinate="${r}"]`).classList.add("placed")}}})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=o.U.shipTypes[i].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),n(".gameboard.initial"),n(".gameboard.player"),n(".gameboard.computer"),a(".gameboard.initial",g),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",p)})),document.querySelector("#rotateBtn").addEventListener("click",m),document.querySelector("#newGame").addEventListener("click",(()=>{i=0,d=!0,u=!1,h=null,r.lastHitCoordinate=null,r.currentDirection=null,e.reset(),t.reset(),r.clearSet(),c(".gameboard.initial"),c(".gameboard.player"),c(".gameboard.computer"),document.querySelector(".ship-type").textContent=o.U.shipTypes[0].type,o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),o.U.toggleModal(document.querySelector(".modal.initial"),"show")}))}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>a,_V:()=>n,oP:()=>l});var o=r(555);const n=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},a=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null)));let r=[],o=[];const n=()=>{const r=[];for(let o=0;o<e;o+=1)for(let n=0;n<e;n+=1){const e=t[o][n];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const n=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),a=o.some((([e,r])=>null!==t[e][r])),l=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(n&&!a&&!l){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:n,getAllShips:()=>{const r=[];for(let o=0;o<e;o+=1)for(let n=0;n<e;n+=1){const e=t[o][n];null!==e&&e.ship&&!r.includes(e.ship)&&r.push(e.ship)}return r},getShipCoordinates:r=>{const o=[];for(let n=0;n<e;n+=1)for(let a=0;a<e;a+=1){const e=t[n][a];e&&e.ship===r&&o.push([n,a])}return o},receiveAttack:e=>{const[n,a]=e,l=parseInt(a,10),c=n.charCodeAt(0)-65,s=t[l][c];if(null!==s){const{ship:t}=s;return t.hit(),r.push(e),t}return o.push(e),r.push(e),null},getMissedAttacks:()=>o,getAttackedCoordinates:()=>r,allShipsSunk:()=>n().every((e=>e.isSunk())),reset:()=>{t.forEach(((e,r)=>{e.forEach(((e,o)=>{t[r][o]=null}))})),r=[],o=[]}}},l=(e,t,r)=>{const n=new Set,a=(e,t)=>{const[r,n]=e;let a=parseInt(n,10),l=r.charCodeAt(0)-65;switch(t){case"up":a-=1;break;case"down":a+=1;break;case"left":l-=1;break;case"right":l+=1}return o.r.convertToAlphanumeric([a,l])},l=()=>{const e=["up","down","left","right"];if(t){const r=e.indexOf(t);-1!==r&&(e.splice(r,1),e.push(t),console.log(t))}else for(let t=e.length-1;t>0;t-=1){const r=Math.floor(Math.random()*(t+1));[e[t],e[r]]=[e[r],e[t]]}return e};return{name:e,lastHitCoordinate:r,currentDirection:t,attack:(e,t,r)=>{const c=e.getGrid().length,s=o.r.getAllValidCoordinates(c);let i="";if(console.log(`${r} : ${t}`),t&&r){const o=l();for(const l of o)if(i=a(t,l),s.includes(i)&&!n.has(i)&&!e.getAttackedCoordinates().includes(i))return n.add(i),t=i,r=l,i}do{i=s[Math.floor(Math.random()*s.length)]}while(n.has(i)||e.getAttackedCoordinates().includes(i));return n.add(i),i},getAttackedSet:()=>n,clearSet:()=>{n.clear()}}}},555:(e,t,r)=>{r.d(t,{U:()=>n,r:()=>o});const o=(()=>{const e=[],t=([e,t])=>String.fromCharCode(t+65)+e;return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10),t]},convertToAlphanumeric:t,getAllValidCoordinates:r=>{for(let o=0;o<r;o+=1)for(let n=0;n<r;n+=1){const r=t([o,n]);e.push(r)}return e}}})(),n={shipTypes:[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}],toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,r),a.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,