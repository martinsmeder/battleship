(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const a=o.r.convertToAlphanumeric([e,r]),n=document.createElement("div");n.classList.add("square"),n.dataset.coordinate=a,t.appendChild(n)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))},l=e=>{document.querySelector("#winner").textContent=`${e} won!`},c=e=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{e.className="square"}))};var s=r(776);(()=>{const e=(0,s.Br)(),t=(0,s.Br)(),r=(0,s.oP)("computer");let d=0,i=!0,u=!1,h=null;const p=a=>{if(!i){const n=a.target,c=n.dataset.coordinate;console.log(`playerAttack() at: ${c}`),t.getAttackedCoordinates().includes(c)||(t.receiveAttack(c)?n.classList.add("hit"):n.classList.add("miss"),t.allShipsSunk()&&(h="You",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show")),(()=>{if(!i){const t=r.attack(e),a=e.receiveAttack(t);console.log(`computerAttack() at: ${t}`);const n=document.querySelector(`.gameboard.player [data-coordinate="${t}"]`);a?n.classList.add("hit"):n.classList.add("miss"),e.allShipsSunk()&&(h="The computer",l(h),o.U.toggleModal(document.querySelector(".modal.endgame"),"show"))}})())}},m=()=>{u=!u},g=[{eventType:"mouseover",handler:e=>{if(i){const t=e.target.dataset.coordinate,{length:r}=o.U.shipTypes[d],[a,n]=o.r.convertToIndices(t);Array.from({length:r},((e,t)=>{const r=u?a+t:a,l=u?n:n+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-coordinate="${o.r.convertToAlphanumeric([r,l])}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:r=>{if(i){const a=r.target,{coordinate:n}=a.dataset,{length:l}=o.U.shipTypes[d],[c,h]=o.r.convertToIndices(n),p=Array.from({length:l},((e,t)=>[u?c+t:c,u?h:h+t])),m=(0,s._V)(l);if(e.placeShip(m,p))if(a.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-coordinate="${o.r.convertToAlphanumeric([e,t])}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-coordinate="${o.r.convertToAlphanumeric([e,t])}"]`).classList.add("placed")})),d+=1,d===o.U.shipTypes.length)i=!1,(()=>{for(const e of o.U.shipTypes){const{length:r}=e,a=(0,s._V)(r),n=10;let l,c=!1;for(;!c;){const e=Math.floor(Math.random()*n),o=Math.floor(Math.random()*n);u=Math.random()<.5,u&&e+r<=n?l=Array.from({length:r},((t,r)=>[e+r,o])):!u&&o+r<=n&&(l=Array.from({length:r},((t,r)=>[e,o+r]))),l&&(c=t.placeShip(a,l))}const d=t.getShipCoordinates(a);for(const[e,t]of d){const r=o.r.convertToAlphanumeric([e,t]);document.querySelector(`.gameboard.computer [data-coordinate="${r}"]`).classList.add("placed")}}})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=o.U.shipTypes[d].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",g),document.querySelectorAll(".gameboard.computer .square").forEach((e=>{e.addEventListener("click",p)})),document.querySelector("#rotateBtn").addEventListener("click",m),document.querySelector("#newGame").addEventListener("click",(()=>{d=0,i=!0,u=!1,h=null,e.reset(),t.reset(),r.clearSet(),c(".gameboard.initial"),c(".gameboard.player"),c(".gameboard.computer"),document.querySelector(".ship-type").textContent=o.U.shipTypes[0].type,o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),o.U.toggleModal(document.querySelector(".modal.initial"),"show")}))}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a,oP:()=>l});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null)));let r=[],o=[];const a=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),n=o.some((([e,r])=>null!==t[e][r])),l=o.some((([r,o])=>[[r-1,o],[r+1,o],[r,o-1],[r,o+1],[r-1,o-1],[r-1,o+1],[r+1,o-1],[r+1,o+1]].some((([r,o])=>r>=0&&r<e&&o>=0&&o<e&&null!==t[r]?.[o]))));if(a&&!n&&!l){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:a,getAllShips:()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null!==e&&e.ship&&!r.includes(e.ship)&&r.push(e.ship)}return r},getShipCoordinates:r=>{const o=[];for(let a=0;a<e;a+=1)for(let n=0;n<e;n+=1){const e=t[a][n];e&&e.ship===r&&o.push([a,n])}return o},receiveAttack:e=>{const[a,n]=e,l=parseInt(n,10),c=a.charCodeAt(0)-65,s=t[l][c];if(null!==s){const{ship:t}=s;return t.hit(),r.push(e),t}return o.push(e),r.push(e),null},getMissedAttacks:()=>o,getAttackedCoordinates:()=>r,allShipsSunk:()=>a().every((e=>e.isSunk())),reset:()=>{t.forEach(((e,r)=>{e.forEach(((e,o)=>{t[r][o]=null}))})),r=[],o=[]}}},l=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));return t.add(n),n},getAttackedSet:()=>t,clearSet:()=>{t.clear()}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[],t=([e,t])=>String.fromCharCode(t+65)+e;return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10),t]},convertToAlphanumeric:t,getAllValidCoordinates:r=>{for(let o=0;o<r;o+=1)for(let a=0;a<r;a+=1){const r=t([o,a]);e.push(r)}return e}}})(),a={shipTypes:[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}],toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,