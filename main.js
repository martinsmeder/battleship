(()=>{"use strict";var e={380:(e,t,r)=>{var o=r(555);const a=e=>{const t=document.querySelector(e);t.textContent="";for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=document.createElement("div");o.classList.add("square"),o.dataset.row=e,o.dataset.col=r,t.appendChild(o)}},n=(e,t)=>{document.querySelector(e).querySelectorAll(".square").forEach((e=>{t.forEach((t=>{e.addEventListener(t.eventType,t.handler)}))}))};var l=r(776);(()=>{const e=(0,l.Br)(),t=(0,l.Br)(),r=((0,l.oP)("computer"),[{type:"carrier",length:5},{type:"battleship",length:4},{type:"destroyer",length:3},{type:"submarine",length:3},{type:"patrol boat",length:2}]);let s=0,c=!0,d=!1;const i=()=>{d=!d},h=[{eventType:"mouseover",handler:e=>{if(c){const t=e.target,o=parseInt(t.dataset.row,10),a=parseInt(t.dataset.col,10),{length:n}=r[s];Array.from({length:n},((e,t)=>{const r=d?o+t:o,n=d?a:a+t;return{initialSquare:document.querySelector(`.gameboard.initial [data-row="${r}"][data-col="${n}"]`)}})).forEach((({initialSquare:e})=>{e&&e.classList.add("hovered")}))}}},{eventType:"mouseleave",handler:()=>{document.querySelectorAll(".gameboard .hovered").forEach((e=>{e.classList.remove("hovered")}))}},{eventType:"click",handler:a=>{if(c){const n=a.target,i=parseInt(n.dataset.row,10),h=parseInt(n.dataset.col,10),{length:u}=r[s],p=Array.from({length:u},((e,t)=>[d?i+t:i,d?h:h+t])),m=(0,l._V)(u);if(e.placeShip(m,p))if(n.classList.add("placed"),p.forEach((([e,t])=>{document.querySelector(`[data-row="${e}"][data-col="${t}"]`).classList.add("placed"),document.querySelector(`.gameboard.initial [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),s+=1,s===r.length)c=!1,(()=>{const e=r.map((e=>{const{length:r}=e;let o=[],a=!1;for(;!a;){const e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());o=Array.from({length:r},((t,r)=>[d?e+r:e,d?n:n+r])),a=t.placeShip((0,l._V)(r),o)}return o.forEach((([e,t])=>{document.querySelector(`.gameboard.computer [data-row="${e}"][data-col="${t}"]`).classList.add("placed")})),{type:e.type,coordinates:o}}));console.log("Computer ships:",e)})(),setTimeout((()=>{o.U.toggleModal(document.querySelector(".modal.initial"),"hide")}),500);else{const e=r[s].type;document.querySelector(".ship-type").textContent=e}}}}];return{init:()=>{o.U.toggleModal(document.querySelector(".modal.endgame"),"hide"),a(".gameboard.initial"),a(".gameboard.player"),a(".gameboard.computer"),n(".gameboard.initial",h),document.querySelector("#rotateBtn").addEventListener("click",i)}}})().init()},776:(e,t,r)=>{r.d(t,{Br:()=>n,_V:()=>a,oP:()=>l});var o=r(555);const a=e=>{let t=0;return{length:e,hit:()=>{t+=1},isSunk:()=>t>=e,get hits(){return t}}},n=()=>{const e=10,t=Array.from({length:e},(()=>Array(e).fill(null))),r=[],a=[],n=()=>{const r=[];for(let o=0;o<e;o+=1)for(let a=0;a<e;a+=1){const e=t[o][a];null===e||!e.ship||r.includes(e.ship)||e.ship.isSunk()||r.push(e.ship)}return r};return{getGrid:()=>t,placeShip:(r,o)=>{const a=o.every((([t,r])=>t>=0&&t<e&&r>=0&&r<e)),n=o.some((([e,r])=>null!==t[e][r]));if(a&&!n){const e={ship:r,coordinates:o};return e.coordinates.forEach((([r,o])=>{t[r][o]=e})),!0}return!1},getShips:n,getShipCoordinates:r=>{const a=[];for(let n=0;n<e;n+=1)for(let l=0;l<e;l+=1){const e=t[n][l];e&&e.ship===r&&a.push(o.r.convertToAlphanumeric([n,l]))}return a},receiveAttack:e=>{const[n,l]=o.r.convertToIndices(e),s=t[n][l],c=s&&s.ship;c?c.hit():a.push(e),r.push(e)},getMissedAttacks:()=>a,getAttackedCoordinates:()=>r,allShipsSunk:()=>n().every((e=>e.isSunk()))}},l=e=>{const t=new Set;return{name:e,attack:e=>{const r=e.getGrid().length,a=o.r.getAllValidCoordinates(r);let n="";do{n=a[Math.floor(Math.random()*a.length)]}while(t.has(n)||e.getAttackedCoordinates().includes(n));t.add(n),e.receiveAttack(n)}}}},555:(e,t,r)=>{r.d(t,{U:()=>a,r:()=>o});const o=(()=>{const e=[];return{convertToIndices:e=>{const t=e.charCodeAt(0)-65;return[parseInt(e.slice(1),10)-1,t]},convertToAlphanumeric:([e,t])=>String.fromCharCode(t+65)+(e+1),getAllValidCoordinates:t=>{for(let r=0;r<t;r+=1)for(let a=0;a<t;a+=1){const t=o.convertToAlphanumeric([r,a]);e.push(t)}return e}}})(),a={toggleModal:(e,t)=>{const r=e,o="show"===t?"flex":"none";e.closest(".overlay").style.display=o,r.style.display=o}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r(380),r(776)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBRTFFLEVDTkRULEVBQW9CVSxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDRWxGaEIsRUFBb0IsS0FFTUEsRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvcmVuZGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZmFjdG9yaWVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBtb2R1bGUgY2FuIGJlIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgY29udGVudCBvbiB0aGUgcGFnZS5cbi8vIEl0IGNhbiBpbmNsdWRlIGZ1bmN0aW9ucyB0byB1cGRhdGUgdGhlIERPTSBlbGVtZW50cyByZXByZXNlbnRpbmcgdGhlXG4vLyBnYW1lIGJvYXJkcywgc2hpcHMsIGF0dGFja3MsIG1lc3NhZ2VzLCBhbmQgb3RoZXIgVUkgY29tcG9uZW50cy4gSXQgc2hvdWxkXG4vLyBlbmNhcHN1bGF0ZSB0aGUgRE9NIG1hbmlwdWxhdGlvbiBjb2RlIGFuZCBwcm92aWRlIGEgY2xlYW4gaW50ZXJmYWNlIGZvclxuLy8gdXBkYXRpbmcgdGhlIFVJIGJhc2VkIG9uIHRoZSBnYW1lIHN0YXRlLiBJdCBjYW4gYmUgdGhlIGJyaWRnZSBiZXR3ZWVuIHRoZVxuLy8gZ2FtZSBsb2dpYyBhbmQgdGhlIGFjdHVhbCBET00gbWFuaXB1bGF0aW9uLlxuXG5jb25zdCBSZW5kZXJlciA9ICgoKSA9PiB7XG4gIGNvbnN0IHJlbmRlckdhbWVib2FyZCA9IChjb250YWluZXJFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbGVtZW50KTtcblxuICAgIGNvbnRhaW5lci50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wgKz0gMSkge1xuICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZVwiKTtcbiAgICAgICAgc3F1YXJlLmRhdGFzZXQucm93ID0gcm93O1xuICAgICAgICBzcXVhcmUuZGF0YXNldC5jb2wgPSBjb2w7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGF0dGFjaEV2ZW50TGlzdGVuZXJzID0gKGNvbnRhaW5lckVsZW1lbnQsIGV2ZW50TGlzdGVuZXJzKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJFbGVtZW50KTtcblxuICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnNxdWFyZVwiKS5mb3JFYWNoKChzcXVhcmUpID0+IHtcbiAgICAgIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLmV2ZW50VHlwZSwgbGlzdGVuZXIuaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckdhbWVib2FyZCxcbiAgICBhdHRhY2hFdmVudExpc3RlbmVycyxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlcmVyO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgeyBBcHBIZWxwZXJzLCBGYWN0b3J5SGVscGVycyB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgUmVuZGVyZXIgZnJvbSBcIi4vcmVuZGVyXCI7XG5pbXBvcnQgeyBTaGlwRmFjdG9yeSwgR2FtZWJvYXJkRmFjdG9yeSwgUGxheWVyRmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllc1wiO1xuXG4vLyAxLiAtLS1cbi8vIDIuIG1ha2UgdGhlIGNvbXB1dGVyIGNob29zZSBiZXR3ZWVuIHZlcnRpYWwgb3IgaG9yaXpvbnRhbCByYW5kb21seSB3aXRob3V0IGJyZWFraW5nIHRoZVxuLy8gICAgY29kZS4gVGhlIGlzVmVydGljYWwgPSBNYXRoLnJhbmRvbSgpIDwgMC41OyBjYXVzZXMgZXJyb3JzXG4vLyAzLiBoYW5kbGUgcGxheWVyIGF0dGFja3Ncbi8vIDQuIGRpc3BsYXkgcGxheWVyIGF0dGFja3Ncbi8vIDUuIGhhbmRsZSBjb21wdXRlciBhdHRhY2tzXG4vLyA2LiBkaXNwbGF5IGNvbXB1dGVyIGF0dGFja3Ncbi8vIDcuIGhhbmRsZSB3aW5uZXJcbi8vIDguIGRpc3BsYXkgd2lubmVyXG5cbmNvbnN0IENvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICBjb25zdCBwbGF5ZXJHYW1lYm9hcmQgPSBHYW1lYm9hcmRGYWN0b3J5KCk7XG4gIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkID0gR2FtZWJvYXJkRmFjdG9yeSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBjb25zdCBjb21wdXRlciA9IFBsYXllckZhY3RvcnkoXCJjb21wdXRlclwiKTtcblxuICBjb25zdCBzaGlwVHlwZXMgPSBbXG4gICAgeyB0eXBlOiBcImNhcnJpZXJcIiwgbGVuZ3RoOiA1IH0sXG4gICAgeyB0eXBlOiBcImJhdHRsZXNoaXBcIiwgbGVuZ3RoOiA0IH0sXG4gICAgeyB0eXBlOiBcImRlc3Ryb3llclwiLCBsZW5ndGg6IDMgfSxcbiAgICB7IHR5cGU6IFwic3VibWFyaW5lXCIsIGxlbmd0aDogMyB9LFxuICAgIHsgdHlwZTogXCJwYXRyb2wgYm9hdFwiLCBsZW5ndGg6IDIgfSxcbiAgXTtcblxuICBsZXQgY3VycmVudFNoaXBJbmRleCA9IDA7XG4gIGxldCBzaGlwUGxhY2VtZW50TW9kZSA9IHRydWU7XG4gIGxldCBpc1ZlcnRpY2FsID0gZmFsc2U7XG5cbiAgY29uc3QgcGxhY2VDb21wdXRlclNoaXBzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbXB1dGVyU2hpcHMgPSBzaGlwVHlwZXMubWFwKChzaGlwVHlwZSkgPT4ge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHNoaXBUeXBlO1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gW107XG4gICAgICBsZXQgcGxhY2VkID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICghcGxhY2VkKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0Um93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBjb25zdCBzdGFydENvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgLy8gaXNWZXJ0aWNhbCA9IE1hdGgucmFuZG9tKCkgPCAwLjU7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgY29vcmRpbmF0ZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoIH0sIChfLCBpKSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93ID0gaXNWZXJ0aWNhbCA/IHN0YXJ0Um93ICsgaSA6IHN0YXJ0Um93O1xuICAgICAgICAgIGNvbnN0IGNvbCA9IGlzVmVydGljYWwgPyBzdGFydENvbCA6IHN0YXJ0Q29sICsgaTtcbiAgICAgICAgICByZXR1cm4gW3JvdywgY29sXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGxhY2VkID0gY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKFNoaXBGYWN0b3J5KGxlbmd0aCksIGNvb3JkaW5hdGVzKTtcbiAgICAgIH1cblxuICAgICAgY29vcmRpbmF0ZXMuZm9yRWFjaCgoW3JvdywgY29sXSkgPT4ge1xuICAgICAgICBjb25zdCBwbGFjZWRTcXVhcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGAuZ2FtZWJvYXJkLmNvbXB1dGVyIFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcbiAgICAgICAgKTtcbiAgICAgICAgcGxhY2VkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZWRcIik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHsgdHlwZTogc2hpcFR5cGUudHlwZSwgY29vcmRpbmF0ZXMgfTtcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKFwiQ29tcHV0ZXIgc2hpcHM6XCIsIGNvbXB1dGVyU2hpcHMpO1xuICB9O1xuXG4gIGNvbnN0IHNoaXBQbGFjZW1lbnRIYW5kbGVyID0gKGUpID0+IHtcbiAgICBpZiAoc2hpcFBsYWNlbWVudE1vZGUpIHtcbiAgICAgIGNvbnN0IHNxdWFyZSA9IGUudGFyZ2V0O1xuICAgICAgY29uc3Qgc3RhcnRSb3cgPSBwYXJzZUludChzcXVhcmUuZGF0YXNldC5yb3csIDEwKTtcbiAgICAgIGNvbnN0IHN0YXJ0Q29sID0gcGFyc2VJbnQoc3F1YXJlLmRhdGFzZXQuY29sLCAxMCk7XG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gc2hpcFR5cGVzW2N1cnJlbnRTaGlwSW5kZXhdO1xuXG4gICAgICBjb25zdCBzaGlwQ29vcmRpbmF0ZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoIH0sIChfLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvdyA9IGlzVmVydGljYWwgPyBzdGFydFJvdyArIGkgOiBzdGFydFJvdztcbiAgICAgICAgY29uc3QgY29sID0gaXNWZXJ0aWNhbCA/IHN0YXJ0Q29sIDogc3RhcnRDb2wgKyBpO1xuICAgICAgICByZXR1cm4gW3JvdywgY29sXTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzaGlwID0gU2hpcEZhY3RvcnkobGVuZ3RoKTtcbiAgICAgIGNvbnN0IHBsYWNlZCA9IHBsYXllckdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcCwgc2hpcENvb3JkaW5hdGVzKTtcblxuICAgICAgaWYgKHBsYWNlZCkge1xuICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcInBsYWNlZFwiKTtcbiAgICAgICAgc2hpcENvb3JkaW5hdGVzLmZvckVhY2goKFtyb3csIGNvbF0pID0+IHtcbiAgICAgICAgICBjb25zdCBwbGFjZWRTcXVhcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcbiAgICAgICAgICApO1xuICAgICAgICAgIHBsYWNlZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VkXCIpO1xuICAgICAgICAgIGNvbnN0IGluaXRpYWxTcXVhcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYC5nYW1lYm9hcmQuaW5pdGlhbCBbZGF0YS1yb3c9XCIke3Jvd31cIl1bZGF0YS1jb2w9XCIke2NvbH1cIl1gXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpbml0aWFsU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZWRcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnRTaGlwSW5kZXggKz0gMTtcblxuICAgICAgICBpZiAoY3VycmVudFNoaXBJbmRleCA9PT0gc2hpcFR5cGVzLmxlbmd0aCkge1xuICAgICAgICAgIHNoaXBQbGFjZW1lbnRNb2RlID0gZmFsc2U7XG4gICAgICAgICAgcGxhY2VDb21wdXRlclNoaXBzKCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBBcHBIZWxwZXJzLnRvZ2dsZU1vZGFsKFxuICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLmluaXRpYWxcIiksXG4gICAgICAgICAgICAgIFwiaGlkZVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV4dFNoaXBUeXBlID0gc2hpcFR5cGVzW2N1cnJlbnRTaGlwSW5kZXhdLnR5cGU7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwLXR5cGVcIikudGV4dENvbnRlbnQgPSBuZXh0U2hpcFR5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2FtZWJvYXJkSG92ZXJIYW5kbGVyID0gKGUpID0+IHtcbiAgICBpZiAoc2hpcFBsYWNlbWVudE1vZGUpIHtcbiAgICAgIGNvbnN0IHNxdWFyZSA9IGUudGFyZ2V0O1xuICAgICAgY29uc3Qgc3RhcnRSb3cgPSBwYXJzZUludChzcXVhcmUuZGF0YXNldC5yb3csIDEwKTtcbiAgICAgIGNvbnN0IHN0YXJ0Q29sID0gcGFyc2VJbnQoc3F1YXJlLmRhdGFzZXQuY29sLCAxMCk7XG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gc2hpcFR5cGVzW2N1cnJlbnRTaGlwSW5kZXhdO1xuXG4gICAgICBjb25zdCBob3ZlcmVkU3F1YXJlcyA9IEFycmF5LmZyb20oeyBsZW5ndGggfSwgKF8sIGkpID0+IHtcbiAgICAgICAgY29uc3Qgcm93ID0gaXNWZXJ0aWNhbCA/IHN0YXJ0Um93ICsgaSA6IHN0YXJ0Um93O1xuICAgICAgICBjb25zdCBjb2wgPSBpc1ZlcnRpY2FsID8gc3RhcnRDb2wgOiBzdGFydENvbCArIGk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5pdGlhbFNxdWFyZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGAuZ2FtZWJvYXJkLmluaXRpYWwgW2RhdGEtcm93PVwiJHtyb3d9XCJdW2RhdGEtY29sPVwiJHtjb2x9XCJdYFxuICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgaG92ZXJlZFNxdWFyZXMuZm9yRWFjaCgoeyBpbml0aWFsU3F1YXJlIH0pID0+IHtcbiAgICAgICAgaWYgKGluaXRpYWxTcXVhcmUpIHtcbiAgICAgICAgICBpbml0aWFsU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJob3ZlcmVkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2FtZWJvYXJkTW91c2VMZWF2ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgaG92ZXJlZFNxdWFyZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmdhbWVib2FyZCAuaG92ZXJlZFwiKTtcbiAgICBob3ZlcmVkU3F1YXJlcy5mb3JFYWNoKChob3ZlcmVkU3F1YXJlKSA9PiB7XG4gICAgICBob3ZlcmVkU3F1YXJlLmNsYXNzTGlzdC5yZW1vdmUoXCJob3ZlcmVkXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkQ2xpY2tIYW5kbGVyID0gKGUpID0+IHtcbiAgLy8gICBpZiAoIXNoaXBQbGFjZW1lbnRNb2RlKSB7XG4gIC8vICAgICBjb25zdCBzcXVhcmUgPSBlLnRhcmdldDtcbiAgLy8gICAgIGNvbnN0IHJvdyA9IHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LnJvdywgMTApO1xuICAvLyAgICAgY29uc3QgY29sID0gcGFyc2VJbnQoc3F1YXJlLmRhdGFzZXQuY29sLCAxMCk7XG4gIC8vICAgICBjb25zdCBjb29yZGluYXRlID0gRmFjdG9yeUhlbHBlcnMuY29udmVydFRvQWxwaGFudW1lcmljKFtyb3csIGNvbF0pO1xuXG4gIC8vICAgICBpZiAoIWNvbXB1dGVyR2FtZWJvYXJkLmdldEF0dGFja2VkQ29vcmRpbmF0ZXMoKS5pbmNsdWRlcyhjb29yZGluYXRlKSkge1xuICAvLyAgICAgICBjb21wdXRlckdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGUpO1xuICAvLyAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZChcImF0dGFja2VkXCIpO1xuICAvLyAgICAgICBjb25zb2xlLmxvZyhcImNvbXB1dGVyR2FtZWJvYXJkIGF0dGFja2VkXCIpO1xuXG4gIC8vICAgICAgIGNvbnN0IHNoaXBzID0gY29tcHV0ZXJHYW1lYm9hcmQuZ2V0U2hpcHMoKTtcbiAgLy8gICAgICAgY29uc3QgYXR0YWNrZWRTaGlwID0gc2hpcHMuZmluZCgoc2hpcCkgPT5cbiAgLy8gICAgICAgICBjb21wdXRlckdhbWVib2FyZC5nZXRTaGlwQ29vcmRpbmF0ZXMoc2hpcCkuaW5jbHVkZXMoY29vcmRpbmF0ZSlcbiAgLy8gICAgICAgKTtcblxuICAvLyAgICAgICBpZiAoYXR0YWNrZWRTaGlwKSB7XG4gIC8vICAgICAgICAgY29uc3Qgc2hpcENvb3JkaW5hdGVzID1cbiAgLy8gICAgICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmdldFNoaXBDb29yZGluYXRlcyhhdHRhY2tlZFNoaXApO1xuICAvLyAgICAgICAgIHNoaXBDb29yZGluYXRlcy5mb3JFYWNoKChbciwgY10pID0+IHtcbiAgLy8gICAgICAgICAgIGNvbnN0IGF0dGFja2VkU3F1YXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgLy8gICAgICAgICAgICAgYC5nYW1lYm9hcmQuY29tcHV0ZXIgW2RhdGEtcm93PVwiJHtyfVwiXVtkYXRhLWNvbD1cIiR7Y31cIl1gXG4gIC8vICAgICAgICAgICApO1xuXG4gIC8vICAgICAgICAgICBpZiAoYXR0YWNrZWRTcXVhcmUpIHtcbiAgLy8gICAgICAgICAgICAgYXR0YWNrZWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImhpdFwiKTtcbiAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb21wdXRlciBzaGlwIGhpdFwiKTtcbiAgLy8gICAgICAgICAgIH1cbiAgLy8gICAgICAgICB9KTtcblxuICAvLyAgICAgICAgIGlmIChhdHRhY2tlZFNoaXAuaXNTdW5rKCkpIHtcbiAgLy8gICAgICAgICAgIGlmIChjb21wdXRlckdhbWVib2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBsYXllciB3aW5zIVwiKTtcbiAgLy8gICAgICAgICAgIH0gZWxzZSB7XG4gIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQbGF5ZXIgc2FuayB0aGUgJHthdHRhY2tlZFNoaXAubGVuZ3RofS11bml0IHNoaXAhYCk7XG4gIC8vICAgICAgICAgICB9XG4gIC8vICAgICAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGxheWVyIGhpdCBhIHNoaXAhXCIpO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlBsYXllciBtaXNzZWQhXCIpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyB9O1xuXG4gIGNvbnN0IHJvdGF0ZVNoaXBzID0gKCkgPT4ge1xuICAgIGlzVmVydGljYWwgPSAhaXNWZXJ0aWNhbDtcbiAgfTtcblxuICBjb25zdCBldmVudExpc3RlbmVycyA9IFtcbiAgICB7IGV2ZW50VHlwZTogXCJtb3VzZW92ZXJcIiwgaGFuZGxlcjogZ2FtZWJvYXJkSG92ZXJIYW5kbGVyIH0sXG4gICAgeyBldmVudFR5cGU6IFwibW91c2VsZWF2ZVwiLCBoYW5kbGVyOiBnYW1lYm9hcmRNb3VzZUxlYXZlSGFuZGxlciB9LFxuICAgIHsgZXZlbnRUeXBlOiBcImNsaWNrXCIsIGhhbmRsZXI6IHNoaXBQbGFjZW1lbnRIYW5kbGVyIH0sXG4gIF07XG5cbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBBcHBIZWxwZXJzLnRvZ2dsZU1vZGFsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwuZW5kZ2FtZVwiKSwgXCJoaWRlXCIpO1xuICAgIFJlbmRlcmVyLnJlbmRlckdhbWVib2FyZChcIi5nYW1lYm9hcmQuaW5pdGlhbFwiKTtcbiAgICBSZW5kZXJlci5yZW5kZXJHYW1lYm9hcmQoXCIuZ2FtZWJvYXJkLnBsYXllclwiKTtcbiAgICBSZW5kZXJlci5yZW5kZXJHYW1lYm9hcmQoXCIuZ2FtZWJvYXJkLmNvbXB1dGVyXCIpO1xuICAgIFJlbmRlcmVyLmF0dGFjaEV2ZW50TGlzdGVuZXJzKFwiLmdhbWVib2FyZC5pbml0aWFsXCIsIGV2ZW50TGlzdGVuZXJzKTtcblxuICAgIC8vIGNvbnN0IGNvbXB1dGVyU3F1YXJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgLy8gICBcIi5nYW1lYm9hcmQuY29tcHV0ZXIgLnNxdWFyZVwiXG4gICAgLy8gKTtcbiAgICAvLyBjb21wdXRlclNxdWFyZXMuZm9yRWFjaCgoc3F1YXJlKSA9PiB7XG4gICAgLy8gICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNvbXB1dGVyR2FtZWJvYXJkQ2xpY2tIYW5kbGVyKTtcbiAgICAvLyB9KTtcblxuICAgIGNvbnN0IHJvdGF0ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcm90YXRlQnRuXCIpO1xuICAgIHJvdGF0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcm90YXRlU2hpcHMpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaW5pdCxcbiAgfTtcbn0pKCk7XG5cbkNvbnRyb2xsZXIuaW5pdCgpO1xuXG4vLyAvLyBQZXJmb3JtIHRoZSBjb21wdXRlcidzIHR1cm5cbi8vIGNvbXB1dGVyLmF0dGFjayhwbGF5ZXJHYW1lYm9hcmQpO1xuXG4vLyBjb25zdCBtaXNzZWRBdHRhY2tzID0gY29tcHV0ZXJHYW1lYm9hcmQuZ2V0TWlzc2VkQXR0YWNrcygpO1xuLy8gbWlzc2VkQXR0YWNrcy5mb3JFYWNoKChtaXNzZWRBdHRhY2spID0+IHtcbi8vICAgY29uc3QgbWlzc2VkU3F1YXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihcbi8vICAgICBgLmdhbWVib2FyZC5jb21wdXRlciBbZGF0YS1jb29yZGluYXRlPVwiJHttaXNzZWRBdHRhY2t9XCJdYFxuLy8gICApO1xuLy8gICBtaXNzZWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcIm1pc3NcIik7XG4vLyB9KTtcblxuLy8gY29uc3QgY29tcHV0ZXJBdHRhY2tlZENvb3JkaW5hdGVzID1cbi8vICAgY29tcHV0ZXJHYW1lYm9hcmQuZ2V0QXR0YWNrZWRDb29yZGluYXRlcygpO1xuLy8gY29uc3QgbGFzdENvb3JkaW5hdGUgPVxuLy8gICBjb21wdXRlckF0dGFja2VkQ29vcmRpbmF0ZXNbY29tcHV0ZXJBdHRhY2tlZENvb3JkaW5hdGVzLmxlbmd0aCAtIDFdO1xuLy8gY29uc3QgYXR0YWNrZWRTaGlwT25Db21wdXRlciA9IHBsYXllckdhbWVib2FyZFxuLy8gICAuZ2V0U2hpcHMoKVxuLy8gICAuZmluZCgoc2hpcCkgPT5cbi8vICAgICBjb21wdXRlckdhbWVib2FyZC5nZXRTaGlwQ29vcmRpbmF0ZXMoc2hpcCkuaW5jbHVkZXMobGFzdENvb3JkaW5hdGUpXG4vLyAgICk7XG5cbi8vIGlmIChhdHRhY2tlZFNoaXBPbkNvbXB1dGVyKSB7XG4vLyAgIGNvbnN0IHNoaXBDb29yZGluYXRlcyA9IGNvbXB1dGVyR2FtZWJvYXJkLmdldFNoaXBDb29yZGluYXRlcyhcbi8vICAgICBhdHRhY2tlZFNoaXBPbkNvbXB1dGVyXG4vLyAgICk7XG4vLyAgIHNoaXBDb29yZGluYXRlcy5mb3JFYWNoKChjb29yZCkgPT4ge1xuLy8gICAgIGNvbnN0IGF0dGFja2VkU3F1YXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihcbi8vICAgICAgIGAuZ2FtZWJvYXJkLmNvbXB1dGVyIFtkYXRhLWNvb3JkaW5hdGU9XCIke2Nvb3JkfVwiXWBcbi8vICAgICApO1xuLy8gICAgIGF0dGFja2VkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJoaXRcIik7XG4vLyAgIH0pO1xuXG4vLyAgIGlmIChhdHRhY2tlZFNoaXBPbkNvbXB1dGVyLmlzU3VuaygpKSB7XG4vLyAgICAgaWYgKGNvbXB1dGVyR2FtZWJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIkNvbXB1dGVyIHdpbnMhXCIpO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcbi8vICAgICAgICAgYENvbXB1dGVyIHNhbmsgdGhlICR7YXR0YWNrZWRTaGlwT25Db21wdXRlci5sZW5ndGh9LXVuaXQgc2hpcCFgXG4vLyAgICAgICApO1xuLy8gICAgIH1cbi8vICAgfSBlbHNlIHtcbi8vICAgICBjb25zb2xlLmxvZyhcIkNvbXB1dGVyIGhpdCBhIHNoaXAhXCIpO1xuLy8gICB9XG4vLyB9IGVsc2Uge1xuLy8gICBjb25zb2xlLmxvZyhcIkNvbXB1dGVyIG1pc3NlZCFcIik7XG4vLyB9XG4iLCJpbXBvcnQgeyBGYWN0b3J5SGVscGVycyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBTaGlwRmFjdG9yeSA9IChsZW5ndGgpID0+IHtcbiAgbGV0IGhpdHMgPSAwO1xuXG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBoaXRzICs9IDE7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gaGl0cyA+PSBsZW5ndGg7IC8vIFJldHVybiB0cnVlIGlmIGhpdHMgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIGxlbmd0aFxuXG4gIHJldHVybiB7XG4gICAgbGVuZ3RoLFxuICAgIGhpdCxcbiAgICBpc1N1bmssXG4gICAgZ2V0IGhpdHMoKSB7XG4gICAgICAvLyBHZXR0ZXIgZnVuY3Rpb24gZm9yIGhpdHMuIFVzaW5nIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIHRvIGVuc3VyZSBpdCBoYXMgYWNjZXNzIHRvIHRoZVxuICAgICAgLy8gYGhpdHNgIHZhcmlhYmxlIGR5bmFtaWNhbGx5LCBzaW5jZSBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgYXJlIGhvaXN0ZWQgYW5kIGNhbiBiZSB1c2VkXG4gICAgICAvLyBiZWZvcmUgdGhleSBhcmUgZGVmaW5lZC4gVGhpcyBhbGxvd3MgYWNjZXNzaW5nIHRoZSBjdXJyZW50IHZhbHVlIG9mIGBoaXRzYCBldmVuIGJlZm9yZVxuICAgICAgLy8gY2FsbGluZyB0aGUgYGhpdGAgZnVuY3Rpb25cbiAgICAgIHJldHVybiBoaXRzO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgR2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgY29uc3QgZ3JpZFNpemUgPSAxMDtcbiAgY29uc3QgZ3JpZCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGdyaWRTaXplIH0sICgpID0+XG4gICAgQXJyYXkoZ3JpZFNpemUpLmZpbGwobnVsbClcbiAgKTtcblxuICBjb25zdCBhdHRhY2tlZENvb3JkaW5hdGVzID0gW107XG4gIGNvbnN0IG1pc3NlZEF0dGFja3MgPSBbXTtcblxuICBjb25zdCBnZXRHcmlkID0gKCkgPT4gZ3JpZDtcblxuICBjb25zdCBwbGFjZVNoaXAgPSAoc2hpcCwgY29vcmRpbmF0ZXMpID0+IHtcbiAgICAvLyBDaGVjayBpZiBhbGwgY29vcmRpbmF0ZXMgYXJlIHdpdGhpbiB0aGUgYm91bmRhcmllcyBvZiB0aGUgZ3JpZFxuICAgIGNvbnN0IHdpdGhpbkJvdW5kYXJpZXMgPSBjb29yZGluYXRlcy5ldmVyeShcbiAgICAgIChbcm93LCBjb2xdKSA9PiByb3cgPj0gMCAmJiByb3cgPCBncmlkU2l6ZSAmJiBjb2wgPj0gMCAmJiBjb2wgPCBncmlkU2l6ZVxuICAgICk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgYW55IGNvbmZsaWN0cyB3aXRoIGV4aXN0aW5nIHNoaXAgcGxhY2VtZW50cyBvbiB0aGUgZ3JpZFxuICAgIGNvbnN0IGNvbmZsaWN0cyA9IGNvb3JkaW5hdGVzLnNvbWUoKFtyb3csIGNvbF0pID0+IGdyaWRbcm93XVtjb2xdICE9PSBudWxsKTtcblxuICAgIC8vIElmIHRoZSBzaGlwIHBsYWNlbWVudCBpcyB3aXRoaW4gYm91bmRhcmllcyBhbmQgaGFzIG5vIGNvbmZsaWN0cy4uLlxuICAgIGlmICh3aXRoaW5Cb3VuZGFyaWVzICYmICFjb25mbGljdHMpIHtcbiAgICAgIC8vIENyZWF0ZSBhbiBvYmplY3QgY29udGFpbmluZyBzaGlwIGluZm9ybWF0aW9uIGFuZCBjb29yZGluYXRlc1xuICAgICAgY29uc3Qgc2hpcEluZm8gPSB7XG4gICAgICAgIHNoaXAsXG4gICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgfTtcblxuICAgICAgLy8gUGxhY2UgdGhlIHNoaXAgb24gdGhlIGdyaWQgYnkgdXBkYXRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgY2VsbHNcbiAgICAgIHNoaXBJbmZvLmNvb3JkaW5hdGVzLmZvckVhY2goKFtyb3csIGNvbF0pID0+IHtcbiAgICAgICAgZ3JpZFtyb3ddW2NvbF0gPSBzaGlwSW5mbztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gU2hpcCBwbGFjZW1lbnQgc3VjY2Vzc2Z1bFxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTsgLy8gT3RoZXJ3aXNlLCBzaGlwIHBsYWNlbWVudCBmYWlsZWRcbiAgfTtcblxuICBjb25zdCBnZXRTaGlwcyA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwcyA9IFtdO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY2VsbCBvZiB0aGUgZ3JpZFxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IGdyaWRTaXplOyByb3cgKz0gMSkge1xuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgZ3JpZFNpemU7IGNvbCArPSAxKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBncmlkW3Jvd11bY29sXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNlbGwgY29udGFpbnMgYSBzaGlwIGFuZCBpdCdzIG5vdCBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBzaGlwcyBhcnJheVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2VsbCAhPT0gbnVsbCAmJlxuICAgICAgICAgIGNlbGwuc2hpcCAmJlxuICAgICAgICAgICFzaGlwcy5pbmNsdWRlcyhjZWxsLnNoaXApICYmXG4gICAgICAgICAgIWNlbGwuc2hpcC5pc1N1bmsoKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBBZGQgdGhlIHNoaXAgdG8gdGhlIHNoaXBzIGFycmF5XG4gICAgICAgICAgc2hpcHMucHVzaChjZWxsLnNoaXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoaXBzO1xuICB9O1xuXG4gIGNvbnN0IGdldFNoaXBDb29yZGluYXRlcyA9IChzaGlwKSA9PiB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBbXTtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGNlbGwgb2YgdGhlIGdyaWRcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBncmlkU2l6ZTsgcm93ICs9IDEpIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGdyaWRTaXplOyBjb2wgKz0gMSkge1xuICAgICAgICBjb25zdCBjZWxsID0gZ3JpZFtyb3ddW2NvbF07XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjZWxsIGV4aXN0cyBhbmQgY29udGFpbnMgdGhlIHNwZWNpZmllZCBzaGlwXG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwuc2hpcCA9PT0gc2hpcCkge1xuICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHJvdyBhbmQgY29sdW1uIGluZGljZXMgdG8gYWxwaGFudW1lcmljIGNvb3JkaW5hdGVzIGFuZCBhZGQgdGhlbSB0b1xuICAgICAgICAgIC8vIHRoZSBjb29yZGluYXRlcyBhcnJheVxuICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goRmFjdG9yeUhlbHBlcnMuY29udmVydFRvQWxwaGFudW1lcmljKFtyb3csIGNvbF0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGUpID0+IHtcbiAgICBjb25zdCBbcm93LCBjb2xdID0gRmFjdG9yeUhlbHBlcnMuY29udmVydFRvSW5kaWNlcyhjb29yZGluYXRlKTtcbiAgICBjb25zdCBjZWxsID0gZ3JpZFtyb3ddW2NvbF07XG5cbiAgICBjb25zdCBzaGlwID0gY2VsbCAmJiBjZWxsLnNoaXA7IC8vIEFjY2VzcyB0aGUgc2hpcCBwcm9wZXJ0eSBvZiB0aGUgY2VsbCBvYmplY3RcblxuICAgIGlmIChzaGlwKSB7XG4gICAgICBzaGlwLmhpdCgpOyAvLyBJbmNyZW1lbnQgaGl0IGNvdW50IG9mIHRoZSBzaGlwXG4gICAgfSBlbHNlIHtcbiAgICAgIG1pc3NlZEF0dGFja3MucHVzaChjb29yZGluYXRlKTsgLy8gUmVjb3JkIG1pc3NlZCBhdHRhY2sgY29vcmRpbmF0ZXNcbiAgICB9XG5cbiAgICBhdHRhY2tlZENvb3JkaW5hdGVzLnB1c2goY29vcmRpbmF0ZSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0TWlzc2VkQXR0YWNrcyA9ICgpID0+IG1pc3NlZEF0dGFja3M7XG5cbiAgY29uc3QgZ2V0QXR0YWNrZWRDb29yZGluYXRlcyA9ICgpID0+IGF0dGFja2VkQ29vcmRpbmF0ZXM7XG5cbiAgY29uc3QgYWxsU2hpcHNTdW5rID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBzID0gZ2V0U2hpcHMoKTsgLy8gUmV0cmlldmUgYWxsIHRoZSBzaGlwcyBvbiB0aGUgZ2FtZWJvYXJkXG5cbiAgICAvLyBDaGVjayBpZiBhbGwgc2hpcHMgYXJlIHN1bmssIHJldHVybiB0cnVlIGlmIHllcywgYW5kIHJldHVybiBmYWxzZSBpZiBub1xuICAgIHJldHVybiBzaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRHcmlkLFxuICAgIHBsYWNlU2hpcCxcbiAgICBnZXRTaGlwcyxcbiAgICBnZXRTaGlwQ29vcmRpbmF0ZXMsXG4gICAgcmVjZWl2ZUF0dGFjayxcbiAgICBnZXRNaXNzZWRBdHRhY2tzLFxuICAgIGdldEF0dGFja2VkQ29vcmRpbmF0ZXMsXG4gICAgYWxsU2hpcHNTdW5rLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IFBsYXllckZhY3RvcnkgPSAobmFtZSkgPT4ge1xuICBjb25zdCBhdHRhY2tlZENvb3JkaW5hdGVzID0gbmV3IFNldCgpOyAvLyBTZXQgdG8ga2VlcCB0cmFjayBvZiBhdHRhY2tlZCBjb29yZGluYXRlc1xuXG4gIGNvbnN0IGF0dGFjayA9IChlbmVteUdhbWVib2FyZCkgPT4ge1xuICAgIGNvbnN0IGdyaWRTaXplID0gZW5lbXlHYW1lYm9hcmQuZ2V0R3JpZCgpLmxlbmd0aDtcbiAgICBjb25zdCB2YWxpZENvb3JkaW5hdGVzID0gRmFjdG9yeUhlbHBlcnMuZ2V0QWxsVmFsaWRDb29yZGluYXRlcyhncmlkU2l6ZSk7XG5cbiAgICBsZXQgY29vcmRpbmF0ZSA9IFwiXCI7XG5cbiAgICAvLyBQZXJmb3JtIGEgZG8td2hpbGUgbG9vcCB1bnRpbCBhIHVuaXF1ZSBjb29yZGluYXRlIGlzIGZvdW5kXG4gICAgZG8ge1xuICAgICAgLy8gR2VuZXJhdGUgYSByYW5kb20gaW5kZXggYmFzZWQgb24gdGhlIGxlbmd0aCBvZiB2YWxpZENvb3JkaW5hdGVzIGFycmF5XG4gICAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZhbGlkQ29vcmRpbmF0ZXMubGVuZ3RoKTtcblxuICAgICAgLy8gR2V0IHRoZSBjb29yZGluYXRlIGF0IHRoZSByYW5kb20gaW5kZXhcbiAgICAgIGNvb3JkaW5hdGUgPSB2YWxpZENvb3JkaW5hdGVzW3JhbmRvbUluZGV4XTtcbiAgICB9IHdoaWxlIChcbiAgICAgIC8vIENvbnRpbnVlIGxvb3Bpbmcgd2l0aG91dCBwZXJmb3JtaW5nIGFueSBhY3Rpb25zIGlmIHRoZSBjb29yZGluYXRlIGlzIGFscmVhZHlcbiAgICAgIC8vIGluIHRoZSBwbGF5ZXJzIGF0dGFja2VkQ29vcmRpbmF0ZXMgc2V0IG9yIGlzIGluY2x1ZGVkIGluIHRoZSBlbmVteUdhbWVib2FyZHNcbiAgICAgIC8vIGF0dGFja2VkQ29vcmRpbmF0ZXMgYXJyYXlcbiAgICAgIGF0dGFja2VkQ29vcmRpbmF0ZXMuaGFzKGNvb3JkaW5hdGUpIHx8XG4gICAgICBlbmVteUdhbWVib2FyZC5nZXRBdHRhY2tlZENvb3JkaW5hdGVzKCkuaW5jbHVkZXMoY29vcmRpbmF0ZSlcbiAgICApO1xuXG4gICAgLy8gQWRkIHRoZSBhdHRhY2tlZCBjb29yZGluYXRlIHRvIHRoZSBwbGF5ZXJzIHNldCBvZiBhdHRhY2tlZCBjb29yZGluYXRlc1xuICAgIGF0dGFja2VkQ29vcmRpbmF0ZXMuYWRkKGNvb3JkaW5hdGUpO1xuXG4gICAgLy8gUGVyZm9ybSB0aGUgYXR0YWNrIG9uIHRoZSBlbmVteSBnYW1lYm9hcmRcbiAgICBlbmVteUdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGUpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBhdHRhY2ssXG4gIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IEZhY3RvcnlIZWxwZXJzID0gKCgpID0+IHtcbiAgY29uc3QgdmFsaWRDb29yZGluYXRlcyA9IFtdO1xuXG4gIGNvbnN0IGNvbnZlcnRUb0luZGljZXMgPSAoY29vcmRpbmF0ZSkgPT4ge1xuICAgIGNvbnN0IGNvbHVtbiA9IGNvb3JkaW5hdGUuY2hhckNvZGVBdCgwKSAtIDY1OyAvLyBDb252ZXJ0IGNvbHVtbiBsZXR0ZXIgdG8gaW5kZXhcbiAgICBjb25zdCByb3cgPSBwYXJzZUludChjb29yZGluYXRlLnNsaWNlKDEpLCAxMCkgLSAxOyAvLyBDb252ZXJ0IHJvdyBudW1iZXIgdG8gaW5kZXggd2l0aCByYWRpeCAxMFxuICAgIHJldHVybiBbcm93LCBjb2x1bW5dO1xuICB9O1xuXG4gIGNvbnN0IGNvbnZlcnRUb0FscGhhbnVtZXJpYyA9IChbcm93LCBjb2x1bW5dKSA9PiB7XG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sdW1uICsgNjUpOyAvLyBDb252ZXJ0IGNvbHVtbiBpbmRleCB0byBsZXR0ZXJcbiAgICByZXR1cm4gY29vcmRpbmF0ZSArIChyb3cgKyAxKTsgLy8gQ29udmVydCByb3cgaW5kZXggdG8gbnVtYmVyXG4gIH07XG5cbiAgY29uc3QgZ2V0QWxsVmFsaWRDb29yZGluYXRlcyA9IChncmlkU2l6ZSkgPT4ge1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IGdyaWRTaXplOyByb3cgKz0gMSkge1xuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgZ3JpZFNpemU7IGNvbCArPSAxKSB7XG4gICAgICAgIGNvbnN0IGFscGhhbnVtZXJpY0Nvb3JkaW5hdGUgPSBGYWN0b3J5SGVscGVycy5jb252ZXJ0VG9BbHBoYW51bWVyaWMoW1xuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBjb2wsXG4gICAgICAgIF0pO1xuICAgICAgICB2YWxpZENvb3JkaW5hdGVzLnB1c2goYWxwaGFudW1lcmljQ29vcmRpbmF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkQ29vcmRpbmF0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjb252ZXJ0VG9JbmRpY2VzLFxuICAgIGNvbnZlcnRUb0FscGhhbnVtZXJpYyxcbiAgICBnZXRBbGxWYWxpZENvb3JkaW5hdGVzLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGNvbnN0IEFwcEhlbHBlcnMgPSAoKCkgPT4ge1xuICBjb25zdCB0b2dnbGVNb2RhbCA9IChtb2RhbCwgY2hvaWNlKSA9PiB7XG4gICAgY29uc3QgdG9nZ2xlZE1vZGFsID0gbW9kYWw7XG5cbiAgICBjb25zdCBvdmVybGF5ID0gbW9kYWwuY2xvc2VzdChcIi5vdmVybGF5XCIpO1xuICAgIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IGNob2ljZSA9PT0gXCJzaG93XCIgPyBcImZsZXhcIiA6IFwibm9uZVwiO1xuXG4gICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheVZhbHVlO1xuICAgIHRvZ2dsZWRNb2RhbC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheVZhbHVlO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdG9nZ2xlTW9kYWwsXG4gIH07XG59KSgpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18oMzgwKTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzc2KTtcbiJdLCJuYW1lcyI6WyJjb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJyb3ciLCJjb2wiLCJzcXVhcmUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsImFwcGVuZENoaWxkIiwiZXZlbnRMaXN0ZW5lcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImhhbmRsZXIiLCJwbGF5ZXJHYW1lYm9hcmQiLCJjb21wdXRlckdhbWVib2FyZCIsInNoaXBUeXBlcyIsInR5cGUiLCJsZW5ndGgiLCJjdXJyZW50U2hpcEluZGV4Iiwic2hpcFBsYWNlbWVudE1vZGUiLCJpc1ZlcnRpY2FsIiwicm90YXRlU2hpcHMiLCJlIiwidGFyZ2V0Iiwic3RhcnRSb3ciLCJwYXJzZUludCIsInN0YXJ0Q29sIiwiQXJyYXkiLCJmcm9tIiwiXyIsImkiLCJpbml0aWFsU3F1YXJlIiwiaG92ZXJlZFNxdWFyZSIsInJlbW92ZSIsInNoaXBDb29yZGluYXRlcyIsInNoaXAiLCJwbGFjZVNoaXAiLCJjb21wdXRlclNoaXBzIiwibWFwIiwic2hpcFR5cGUiLCJjb29yZGluYXRlcyIsInBsYWNlZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNvbnNvbGUiLCJsb2ciLCJwbGFjZUNvbXB1dGVyU2hpcHMiLCJzZXRUaW1lb3V0IiwidG9nZ2xlTW9kYWwiLCJuZXh0U2hpcFR5cGUiLCJpbml0IiwiU2hpcEZhY3RvcnkiLCJoaXRzIiwiaGl0IiwiaXNTdW5rIiwiR2FtZWJvYXJkRmFjdG9yeSIsImdyaWRTaXplIiwiZ3JpZCIsImZpbGwiLCJhdHRhY2tlZENvb3JkaW5hdGVzIiwibWlzc2VkQXR0YWNrcyIsImdldFNoaXBzIiwic2hpcHMiLCJjZWxsIiwiaW5jbHVkZXMiLCJwdXNoIiwiZ2V0R3JpZCIsIndpdGhpbkJvdW5kYXJpZXMiLCJldmVyeSIsImNvbmZsaWN0cyIsInNvbWUiLCJzaGlwSW5mbyIsImdldFNoaXBDb29yZGluYXRlcyIsImNvbnZlcnRUb0FscGhhbnVtZXJpYyIsInJlY2VpdmVBdHRhY2siLCJjb29yZGluYXRlIiwiY29udmVydFRvSW5kaWNlcyIsImdldE1pc3NlZEF0dGFja3MiLCJnZXRBdHRhY2tlZENvb3JkaW5hdGVzIiwiYWxsU2hpcHNTdW5rIiwiUGxheWVyRmFjdG9yeSIsIm5hbWUiLCJTZXQiLCJhdHRhY2siLCJlbmVteUdhbWVib2FyZCIsInZhbGlkQ29vcmRpbmF0ZXMiLCJnZXRBbGxWYWxpZENvb3JkaW5hdGVzIiwiaGFzIiwiRmFjdG9yeUhlbHBlcnMiLCJjb2x1bW4iLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhbHBoYW51bWVyaWNDb29yZGluYXRlIiwiQXBwSGVscGVycyIsIm1vZGFsIiwiY2hvaWNlIiwidG9nZ2xlZE1vZGFsIiwiZGlzcGxheVZhbHVlIiwiY2xvc2VzdCIsInN0eWxlIiwiZGlzcGxheSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=